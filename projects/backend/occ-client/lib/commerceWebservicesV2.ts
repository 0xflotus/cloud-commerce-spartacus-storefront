/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CommerceWebservicesV2Context } from "./commerceWebservicesV2Context";

class CommerceWebservicesV2 extends CommerceWebservicesV2Context {
  /**
   * Initializes a new instance of the CommerceWebservicesV2 class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.CommerceWebservicesV2Options) {
    super(options);
  }

  /**
   * Returns details of a specific base store based on its identifier. The response contains detailed
   * base store information.
   * @summary Get a base store.
   * @param baseStoreUid Base store name
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBaseStoreResponse>
   */
  getBaseStore(baseStoreUid: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetBaseStoreOptionalParams): Promise<Models.GetBaseStoreResponse>;
  /**
   * @param baseStoreUid Base store name
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getBaseStore(baseStoreUid: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.BaseStore>): void;
  /**
   * @param baseStoreUid Base store name
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getBaseStore(baseStoreUid: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetBaseStoreOptionalParams, callback: msRest.ServiceCallback<Models.BaseStore>): void;
  getBaseStore(baseStoreUid: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetBaseStoreOptionalParams | msRest.ServiceCallback<Models.BaseStore>, callback?: msRest.ServiceCallback<Models.BaseStore>): Promise<Models.GetBaseStoreResponse> {
    return this.sendOperationRequest(
      {
        baseStoreUid,
        baseSiteId,
        options
      },
      getBaseStoreOperationSpec,
      callback) as Promise<Models.GetBaseStoreResponse>;
  }

  /**
   * Lists supported payment card types.
   * @summary Get a list of supported payment card types.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCardTypesResponse>
   */
  getCardTypes(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCardTypesOptionalParams): Promise<Models.GetCardTypesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCardTypes(baseSiteId: string, callback: msRest.ServiceCallback<Models.CardTypeList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCardTypes(baseSiteId: string, options: Models.CommerceWebservicesV2GetCardTypesOptionalParams, callback: msRest.ServiceCallback<Models.CardTypeList>): void;
  getCardTypes(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCardTypesOptionalParams | msRest.ServiceCallback<Models.CardTypeList>, callback?: msRest.ServiceCallback<Models.CardTypeList>): Promise<Models.GetCardTypesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getCardTypesOperationSpec,
      callback) as Promise<Models.GetCardTypesResponse>;
  }

  /**
   * Returns all catalogs with versions defined for the base store.
   * @summary Get a list of catalogs
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCatalogsResponse>
   */
  getCatalogs(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogsOptionalParams): Promise<Models.GetCatalogsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCatalogs(baseSiteId: string, callback: msRest.ServiceCallback<Models.CatalogList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCatalogs(baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogsOptionalParams, callback: msRest.ServiceCallback<Models.CatalogList>): void;
  getCatalogs(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogsOptionalParams | msRest.ServiceCallback<Models.CatalogList>, callback?: msRest.ServiceCallback<Models.CatalogList>): Promise<Models.GetCatalogsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getCatalogsOperationSpec,
      callback) as Promise<Models.GetCatalogsResponse>;
  }

  /**
   * Returns information about a catalog based on its ID, along with the versions defined for the
   * current base store.
   * @summary Get a catalog
   * @param catalogId Catalog identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCatalogResponse>
   */
  getCatalog(catalogId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogOptionalParams): Promise<Models.GetCatalogResponse>;
  /**
   * @param catalogId Catalog identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCatalog(catalogId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Catalog>): void;
  /**
   * @param catalogId Catalog identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCatalog(catalogId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogOptionalParams, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getCatalog(catalogId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogOptionalParams | msRest.ServiceCallback<Models.Catalog>, callback?: msRest.ServiceCallback<Models.Catalog>): Promise<Models.GetCatalogResponse> {
    return this.sendOperationRequest(
      {
        catalogId,
        baseSiteId,
        options
      },
      getCatalogOperationSpec,
      callback) as Promise<Models.GetCatalogResponse>;
  }

  /**
   * Returns information about the catalog version that exists for the current base store.
   * @summary Get information about catalog version
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCatalogVersionResponse>
   */
  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams): Promise<Models.GetCatalogVersionResponse>;
  /**
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CatalogVersion>): void;
  /**
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams, callback: msRest.ServiceCallback<Models.CatalogVersion>): void;
  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams | msRest.ServiceCallback<Models.CatalogVersion>, callback?: msRest.ServiceCallback<Models.CatalogVersion>): Promise<Models.GetCatalogVersionResponse> {
    return this.sendOperationRequest(
      {
        catalogId,
        catalogVersionId,
        baseSiteId,
        options
      },
      getCatalogVersionOperationSpec,
      callback) as Promise<Models.GetCatalogVersionResponse>;
  }

  /**
   * Returns information about a specified category that exists in a catalog version available for
   * the current base store.
   * @summary Get information about catagory in a catalog version
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param categoryId Category identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCategoriesResponse>
   */
  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCategoriesOptionalParams): Promise<Models.GetCategoriesResponse>;
  /**
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param categoryId Category identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CategoryHierarchy>): void;
  /**
   * @param catalogId Catalog identifier
   * @param catalogVersionId Catalog version identifier
   * @param categoryId Category identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCategoriesOptionalParams, callback: msRest.ServiceCallback<Models.CategoryHierarchy>): void;
  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCategoriesOptionalParams | msRest.ServiceCallback<Models.CategoryHierarchy>, callback?: msRest.ServiceCallback<Models.CategoryHierarchy>): Promise<Models.GetCategoriesResponse> {
    return this.sendOperationRequest(
      {
        catalogId,
        catalogVersionId,
        categoryId,
        baseSiteId,
        options
      },
      getCategoriesOperationSpec,
      callback) as Promise<Models.GetCategoriesResponse>;
  }

  /**
   * Given a list of component identifiers in body, return cms component data.
   * @summary Get components' data by id given in body
   * @param componentIdList List of Component identifiers
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetComponentByIdListUsingPOSTResponse>
   */
  getComponentByIdListUsingPOST(componentIdList: Models.ComponentIDList, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdListUsingPOSTOptionalParams): Promise<Models.GetComponentByIdListUsingPOSTResponse>;
  /**
   * @param componentIdList List of Component identifiers
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getComponentByIdListUsingPOST(componentIdList: Models.ComponentIDList, baseSiteId: string, callback: msRest.ServiceCallback<Models.ListAdaptedComponents>): void;
  /**
   * @param componentIdList List of Component identifiers
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getComponentByIdListUsingPOST(componentIdList: Models.ComponentIDList, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdListUsingPOSTOptionalParams, callback: msRest.ServiceCallback<Models.ListAdaptedComponents>): void;
  getComponentByIdListUsingPOST(componentIdList: Models.ComponentIDList, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdListUsingPOSTOptionalParams | msRest.ServiceCallback<Models.ListAdaptedComponents>, callback?: msRest.ServiceCallback<Models.ListAdaptedComponents>): Promise<Models.GetComponentByIdListUsingPOSTResponse> {
    return this.sendOperationRequest(
      {
        componentIdList,
        baseSiteId,
        options
      },
      getComponentByIdListUsingPOSTOperationSpec,
      callback) as Promise<Models.GetComponentByIdListUsingPOSTResponse>;
  }

  /**
   * Given a component identifier, return cms component data.
   * @summary Get component data
   * @param componentId Component identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetComponentByIdUsingGETResponse>
   */
  getComponentByIdUsingGET(componentId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdUsingGETOptionalParams): Promise<Models.GetComponentByIdUsingGETResponse>;
  /**
   * @param componentId Component identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getComponentByIdUsingGET(componentId: string, baseSiteId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param componentId Component identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getComponentByIdUsingGET(componentId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdUsingGETOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getComponentByIdUsingGET(componentId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdUsingGETOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetComponentByIdUsingGETResponse> {
    return this.sendOperationRequest(
      {
        componentId,
        baseSiteId,
        options
      },
      getComponentByIdUsingGETOperationSpec,
      callback) as Promise<Models.GetComponentByIdUsingGETResponse>;
  }

  /**
   * Given a page identifier, return the page data with a list of cms content slots, each of which
   * contains a list of cms component data.
   * @summary Get page data with list of cms content slots
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPageDataUsingGETResponse>
   */
  getPageDataUsingGET(baseSiteId: string, options?: Models.CommerceWebservicesV2GetPageDataUsingGETOptionalParams): Promise<Models.GetPageDataUsingGETResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getPageDataUsingGET(baseSiteId: string, callback: msRest.ServiceCallback<Models.CMSPage>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getPageDataUsingGET(baseSiteId: string, options: Models.CommerceWebservicesV2GetPageDataUsingGETOptionalParams, callback: msRest.ServiceCallback<Models.CMSPage>): void;
  getPageDataUsingGET(baseSiteId: string, options?: Models.CommerceWebservicesV2GetPageDataUsingGETOptionalParams | msRest.ServiceCallback<Models.CMSPage>, callback?: msRest.ServiceCallback<Models.CMSPage>): Promise<Models.GetPageDataUsingGETResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getPageDataUsingGETOperationSpec,
      callback) as Promise<Models.GetPageDataUsingGETResponse>;
  }

  /**
   * If the value of type equals to shipping, then return shipping countries. If the value of type
   * equals to billing, then return billing countries. If the value of type is not given, return all
   * countries. The list is sorted alphabetically.
   * @summary Get a list of countries.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCountriesResponse>
   */
  getCountries(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCountriesOptionalParams): Promise<Models.GetCountriesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCountries(baseSiteId: string, callback: msRest.ServiceCallback<Models.CountryList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCountries(baseSiteId: string, options: Models.CommerceWebservicesV2GetCountriesOptionalParams, callback: msRest.ServiceCallback<Models.CountryList>): void;
  getCountries(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCountriesOptionalParams | msRest.ServiceCallback<Models.CountryList>, callback?: msRest.ServiceCallback<Models.CountryList>): Promise<Models.GetCountriesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getCountriesOperationSpec,
      callback) as Promise<Models.GetCountriesResponse>;
  }

  /**
   * Lists all regions.
   * @summary Fetch the list of regions for the provided country.
   * @param countyIsoCode An ISO code for a country
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCountryRegionsResponse>
   */
  getCountryRegions(countyIsoCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCountryRegionsOptionalParams): Promise<Models.GetCountryRegionsResponse>;
  /**
   * @param countyIsoCode An ISO code for a country
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCountryRegions(countyIsoCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.RegionList>): void;
  /**
   * @param countyIsoCode An ISO code for a country
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCountryRegions(countyIsoCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCountryRegionsOptionalParams, callback: msRest.ServiceCallback<Models.RegionList>): void;
  getCountryRegions(countyIsoCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCountryRegionsOptionalParams | msRest.ServiceCallback<Models.RegionList>, callback?: msRest.ServiceCallback<Models.RegionList>): Promise<Models.GetCountryRegionsResponse> {
    return this.sendOperationRequest(
      {
        countyIsoCode,
        baseSiteId,
        options
      },
      getCountryRegionsOperationSpec,
      callback) as Promise<Models.GetCountryRegionsResponse>;
  }

  /**
   * Lists all available currencies (all usable currencies for the current store). If the list of
   * currencies for a base store is empty, a list of all currencies available in the system is
   * returned.
   * @summary Get a list of available currencies.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCurrenciesResponse>
   */
  getCurrencies(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCurrenciesOptionalParams): Promise<Models.GetCurrenciesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCurrencies(baseSiteId: string, callback: msRest.ServiceCallback<Models.CurrencyList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCurrencies(baseSiteId: string, options: Models.CommerceWebservicesV2GetCurrenciesOptionalParams, callback: msRest.ServiceCallback<Models.CurrencyList>): void;
  getCurrencies(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCurrenciesOptionalParams | msRest.ServiceCallback<Models.CurrencyList>, callback?: msRest.ServiceCallback<Models.CurrencyList>): Promise<Models.GetCurrenciesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getCurrenciesOperationSpec,
      callback) as Promise<Models.GetCurrenciesResponse>;
  }

  /**
   * Returns all customer groups that are direct subgroups of a customergroup.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Get all subgroups of a customergroup.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerGroupsResponse>
   */
  getCustomerGroups(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupsOptionalParams): Promise<Models.GetCustomerGroupsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCustomerGroups(baseSiteId: string, callback: msRest.ServiceCallback<Models.UserGroupList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerGroups(baseSiteId: string, options: Models.CommerceWebservicesV2GetCustomerGroupsOptionalParams, callback: msRest.ServiceCallback<Models.UserGroupList>): void;
  getCustomerGroups(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupsOptionalParams | msRest.ServiceCallback<Models.UserGroupList>, callback?: msRest.ServiceCallback<Models.UserGroupList>): Promise<Models.GetCustomerGroupsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getCustomerGroupsOperationSpec,
      callback) as Promise<Models.GetCustomerGroupsResponse>;
  }

  /**
   * Creates a new customer group that is a direct subgroup of a customergroup.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Creates a new customer group.
   * @param userGroup User group object with id and name.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createCustomerGroup(userGroup: Models.UserGroup, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userGroup User group object with id and name.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  createCustomerGroup(userGroup: Models.UserGroup, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userGroup User group object with id and name.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  createCustomerGroup(userGroup: Models.UserGroup, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createCustomerGroup(userGroup: Models.UserGroup, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userGroup,
        baseSiteId,
        options
      },
      createCustomerGroupOperationSpec,
      callback);
  }

  /**
   * Returns a customer group with a specific groupId.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Get a specific customer group.
   * @param groupId Group identifier.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerGroupResponse>
   */
  getCustomerGroup(groupId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams): Promise<Models.GetCustomerGroupResponse>;
  /**
   * @param groupId Group identifier.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getCustomerGroup(groupId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.UserGroup>): void;
  /**
   * @param groupId Group identifier.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerGroup(groupId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams, callback: msRest.ServiceCallback<Models.UserGroup>): void;
  getCustomerGroup(groupId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams | msRest.ServiceCallback<Models.UserGroup>, callback?: msRest.ServiceCallback<Models.UserGroup>): Promise<Models.GetCustomerGroupResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        baseSiteId,
        options
      },
      getCustomerGroupOperationSpec,
      callback) as Promise<Models.GetCustomerGroupResponse>;
  }

  /**
   * Sets members for a user group. The list of existing members is overwritten with a new one.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Sets members for a user group.
   * @param groupId Group identifier.
   * @param members List of users to set for customer group.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceUsersForCustomerGroup(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId Group identifier.
   * @param members List of users to set for customer group.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  replaceUsersForCustomerGroup(groupId: string, members: Models.MemberList, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId Group identifier.
   * @param members List of users to set for customer group.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUsersForCustomerGroup(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceUsersForCustomerGroup(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        members,
        baseSiteId,
        options
      },
      replaceUsersForCustomerGroupOperationSpec,
      callback);
  }

  /**
   * Assigns user(s) to a customer group.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Assigns user(s) to a customer group.
   * @param groupId Group identifier.
   * @param members List of users to assign to customer group.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateCustomerGroupWithUsers(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId Group identifier.
   * @param members List of users to assign to customer group.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  updateCustomerGroupWithUsers(groupId: string, members: Models.MemberList, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId Group identifier.
   * @param members List of users to assign to customer group.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCustomerGroupWithUsers(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateCustomerGroupWithUsers(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        members,
        baseSiteId,
        options
      },
      updateCustomerGroupWithUsersOperationSpec,
      callback);
  }

  /**
   * Deletes user from a customer group.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs
   * to the “customermanagergroup”.
   * @summary Deletes a user from a customer group.
   * @param groupId Group identifier.
   * @param userId User identifier.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId Group identifier.
   * @param userId User identifier.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId Group identifier.
   * @param userId User identifier.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        userId,
        baseSiteId,
        options
      },
      removeUsersFromCustomerGroupOperationSpec,
      callback);
  }

  /**
   * Lists all supported delivery countries for the current store. The list is sorted alphabetically.
   * @summary Get a list of shipping countries.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.GetDeliveryCountriesResponse>
   */
  getDeliveryCountries(baseSiteId: string, options?: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams): Promise<Models.GetDeliveryCountriesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getDeliveryCountries(baseSiteId: string, callback: msRest.ServiceCallback<Models.CountryList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getDeliveryCountries(baseSiteId: string, options: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams, callback: msRest.ServiceCallback<Models.CountryList>): void;
  getDeliveryCountries(baseSiteId: string, options?: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams | msRest.ServiceCallback<Models.CountryList>, callback?: msRest.ServiceCallback<Models.CountryList>): Promise<Models.GetDeliveryCountriesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getDeliveryCountriesOperationSpec,
      callback) as Promise<Models.GetDeliveryCountriesResponse>;
  }

  /**
   * Used for product export. Depending on the timestamp parameter, it can return all products or
   * only products modified after the given time.
   * @summary Get a list of product exports.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetExportedProductsResponse>
   */
  getExportedProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2GetExportedProductsOptionalParams): Promise<Models.GetExportedProductsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getExportedProducts(baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getExportedProducts(baseSiteId: string, options: Models.CommerceWebservicesV2GetExportedProductsOptionalParams, callback: msRest.ServiceCallback<Models.ProductList>): void;
  getExportedProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2GetExportedProductsOptionalParams | msRest.ServiceCallback<Models.ProductList>, callback?: msRest.ServiceCallback<Models.ProductList>): Promise<Models.GetExportedProductsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getExportedProductsOperationSpec,
      callback) as Promise<Models.GetExportedProductsResponse>;
  }

  /**
   * Returns the orders that have changed status. Returns only the elements from the current baseSite
   * that have been updated after the provided timestamp.
   * @summary Get a list of orders with status updates.
   * @param timestamp Only items newer than the given parameter are retrieved. This parameter should
   * be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOrderStatusFeedResponse>
   */
  getOrderStatusFeed(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderStatusFeedOptionalParams): Promise<Models.GetOrderStatusFeedResponse>;
  /**
   * @param timestamp Only items newer than the given parameter are retrieved. This parameter should
   * be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getOrderStatusFeed(timestamp: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): void;
  /**
   * @param timestamp Only items newer than the given parameter are retrieved. This parameter should
   * be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrderStatusFeed(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetOrderStatusFeedOptionalParams, callback: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): void;
  getOrderStatusFeed(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderStatusFeedOptionalParams | msRest.ServiceCallback<Models.OrderStatusUpdateElementList>, callback?: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): Promise<Models.GetOrderStatusFeedResponse> {
    return this.sendOperationRequest(
      {
        timestamp,
        baseSiteId,
        options
      },
      getOrderStatusFeedOperationSpec,
      callback) as Promise<Models.GetOrderStatusFeedResponse>;
  }

  /**
   * Generates a token to restore a customer's forgotten password.
   * @summary Generates a token to restore a customer's forgotten password.
   * @param userId Customer's user id. Customer user id is case insensitive.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  doRestorePassword(userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId Customer's user id. Customer user id is case insensitive.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  doRestorePassword(userId: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId Customer's user id. Customer user id is case insensitive.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  doRestorePassword(userId: string, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doRestorePassword(userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        baseSiteId,
        options
      },
      doRestorePasswordOperationSpec,
      callback);
  }

  /**
   * Verifies the decision of the merchant.
   *
   * Note, the “Try it out” button is not enabled for this method (always returns an error) because
   * the Merchant Callback Controller handles parameters differently, depending on which payment
   * provider is used. For more information about this controller, please refer to the
   * “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
   * @summary Verify the decision of the Merchant
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  doHandleMerchantCallback(baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  doHandleMerchantCallback(baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  doHandleMerchantCallback(baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doHandleMerchantCallback(baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      doHandleMerchantCallbackOperationSpec,
      callback);
  }

  /**
   * Verifies the decision of the merchant for a specified cart, and stores information of the
   * PaymentSubscriptionResult for the cart.
   *
   * Note, the “Try it out” button is not enabled for this method (always returns an error) because
   * the Merchant Callback Controller handles parameters differently, depending on which payment
   * provider is used. For more information about this controller, please refer to the
   * “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
   * @summary Verify the decision of the Merchant for a cart
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  doHandleCartMerchantCallback(userId: string, cartId: string, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  doHandleCartMerchantCallback(userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  doHandleCartMerchantCallback(userId: string, cartId: string, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doHandleCartMerchantCallback(userId: string, cartId: string, baseSiteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        cartId,
        baseSiteId,
        options
      },
      doHandleCartMerchantCallbackOperationSpec,
      callback);
  }

  /**
   * Lists all available languages (all languages used for a particular store). If the list of
   * languages for a base store is empty, a list of all languages available in the system will be
   * returned.
   * @summary Get a list of available languages.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLanguagesResponse>
   */
  getLanguages(baseSiteId: string, options?: Models.CommerceWebservicesV2GetLanguagesOptionalParams): Promise<Models.GetLanguagesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getLanguages(baseSiteId: string, callback: msRest.ServiceCallback<Models.LanguageList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getLanguages(baseSiteId: string, options: Models.CommerceWebservicesV2GetLanguagesOptionalParams, callback: msRest.ServiceCallback<Models.LanguageList>): void;
  getLanguages(baseSiteId: string, options?: Models.CommerceWebservicesV2GetLanguagesOptionalParams | msRest.ServiceCallback<Models.LanguageList>, callback?: msRest.ServiceCallback<Models.LanguageList>): Promise<Models.GetLanguagesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getLanguagesOperationSpec,
      callback) as Promise<Models.GetLanguagesResponse>;
  }

  /**
   * Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the
   * order CODE. The response contains detailed order information.
   * @summary Get a order.
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOrderResponse>
   */
  getOrder(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderOptionalParams): Promise<Models.GetOrderResponse>;
  /**
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getOrder(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Order>): void;
  /**
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrder(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetOrderOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;
  getOrder(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderOptionalParams | msRest.ServiceCallback<Models.Order>, callback?: msRest.ServiceCallback<Models.Order>): Promise<Models.GetOrderResponse> {
    return this.sendOperationRequest(
      {
        code,
        baseSiteId,
        options
      },
      getOrderOperationSpec,
      callback) as Promise<Models.GetOrderResponse>;
  }

  /**
   * Returns products added to the express update feed. Returns only elements updated after the
   * provided timestamp. The queue is cleared using a defined cronjob.
   * @summary Get products added to the express update feed.
   * @param timestamp Only items newer than the given parameter are retrieved from the queue. This
   * parameter should be in ISO-8601 format.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetExpressUpdateProductsResponse>
   */
  getExpressUpdateProducts(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetExpressUpdateProductsOptionalParams): Promise<Models.GetExpressUpdateProductsResponse>;
  /**
   * @param timestamp Only items newer than the given parameter are retrieved from the queue. This
   * parameter should be in ISO-8601 format.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getExpressUpdateProducts(timestamp: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): void;
  /**
   * @param timestamp Only items newer than the given parameter are retrieved from the queue. This
   * parameter should be in ISO-8601 format.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getExpressUpdateProducts(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetExpressUpdateProductsOptionalParams, callback: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): void;
  getExpressUpdateProducts(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetExpressUpdateProductsOptionalParams | msRest.ServiceCallback<Models.ProductExpressUpdateElementList>, callback?: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): Promise<Models.GetExpressUpdateProductsResponse> {
    return this.sendOperationRequest(
      {
        timestamp,
        baseSiteId,
        options
      },
      getExpressUpdateProductsOperationSpec,
      callback) as Promise<Models.GetExpressUpdateProductsResponse>;
  }

  /**
   * Returns a list of products and additional data, such as available facets, available sorting, and
   * pagination options. It can also include spelling suggestions. To make spelling suggestions work,
   * you need to make sure that "enableSpellCheck" on the SearchQuery is set to "true" (by default,
   * it should already be set to "true"). You also need to have indexed properties configured to be
   * used for spellchecking.
   * @summary Get a list of products and additional data
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProductsResponse>
   */
  getProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductsOptionalParams): Promise<Models.GetProductsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getProducts(baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductSearchPage>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getProducts(baseSiteId: string, options: Models.CommerceWebservicesV2GetProductsOptionalParams, callback: msRest.ServiceCallback<Models.ProductSearchPage>): void;
  getProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductsOptionalParams | msRest.ServiceCallback<Models.ProductSearchPage>, callback?: msRest.ServiceCallback<Models.ProductSearchPage>): Promise<Models.GetProductsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getProductsOperationSpec,
      callback) as Promise<Models.GetProductsResponse>;
  }

  /**
   * In the response header, the "x-total-count" indicates the total number of products satisfying a
   * query.
   * @summary Get a header with total number of products.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  countProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2CountProductsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  countProducts(baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  countProducts(baseSiteId: string, options: Models.CommerceWebservicesV2CountProductsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  countProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2CountProductsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      countProductsOperationSpec,
      callback);
  }

  /**
   * Returns a list of all available suggestions related to a given term and limits the results to a
   * specific value of the max parameter.
   * @summary Get a list of available suggestions
   * @param term Specified term
   * @param max Specifies the limit of results.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSuggestionsResponse>
   */
  getSuggestions(term: string, max: number, baseSiteId: string, options?: Models.CommerceWebservicesV2GetSuggestionsOptionalParams): Promise<Models.GetSuggestionsResponse>;
  /**
   * @param term Specified term
   * @param max Specifies the limit of results.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getSuggestions(term: string, max: number, baseSiteId: string, callback: msRest.ServiceCallback<Models.SuggestionList>): void;
  /**
   * @param term Specified term
   * @param max Specifies the limit of results.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getSuggestions(term: string, max: number, baseSiteId: string, options: Models.CommerceWebservicesV2GetSuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.SuggestionList>): void;
  getSuggestions(term: string, max: number, baseSiteId: string, options?: Models.CommerceWebservicesV2GetSuggestionsOptionalParams | msRest.ServiceCallback<Models.SuggestionList>, callback?: msRest.ServiceCallback<Models.SuggestionList>): Promise<Models.GetSuggestionsResponse> {
    return this.sendOperationRequest(
      {
        term,
        max,
        baseSiteId,
        options
      },
      getSuggestionsOperationSpec,
      callback) as Promise<Models.GetSuggestionsResponse>;
  }

  /**
   * Returns details of a single product according to a product code.
   * @summary Get product details.
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProductResponse>
   */
  getProduct(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductOptionalParams): Promise<Models.GetProductResponse>;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getProduct(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Product>): void;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getProduct(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  getProduct(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductOptionalParams | msRest.ServiceCallback<Models.Product>, callback?: msRest.ServiceCallback<Models.Product>): Promise<Models.GetProductResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        baseSiteId,
        options
      },
      getProductOperationSpec,
      callback) as Promise<Models.GetProductResponse>;
  }

  /**
   * Returns references for a product with a given product code. Reference type specifies which
   * references to return.
   * @summary Get a product reference
   * @param productCode Product identifier
   * @param referenceType Reference type according to enum ProductReferenceTypeEnum
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProductReferencesResponse>
   */
  getProductReferences(productCode: string, referenceType: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReferencesOptionalParams): Promise<Models.GetProductReferencesResponse>;
  /**
   * @param productCode Product identifier
   * @param referenceType Reference type according to enum ProductReferenceTypeEnum
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getProductReferences(productCode: string, referenceType: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductReferenceList>): void;
  /**
   * @param productCode Product identifier
   * @param referenceType Reference type according to enum ProductReferenceTypeEnum
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getProductReferences(productCode: string, referenceType: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductReferencesOptionalParams, callback: msRest.ServiceCallback<Models.ProductReferenceList>): void;
  getProductReferences(productCode: string, referenceType: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReferencesOptionalParams | msRest.ServiceCallback<Models.ProductReferenceList>, callback?: msRest.ServiceCallback<Models.ProductReferenceList>): Promise<Models.GetProductReferencesResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        referenceType,
        baseSiteId,
        options
      },
      getProductReferencesOperationSpec,
      callback) as Promise<Models.GetProductReferencesResponse>;
  }

  /**
   * Returns the reviews for a product with a given product code.
   * @summary Get reviews for a product
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProductReviewsResponse>
   */
  getProductReviews(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReviewsOptionalParams): Promise<Models.GetProductReviewsResponse>;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getProductReviews(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ReviewList>): void;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getProductReviews(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductReviewsOptionalParams, callback: msRest.ServiceCallback<Models.ReviewList>): void;
  getProductReviews(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReviewsOptionalParams | msRest.ServiceCallback<Models.ReviewList>, callback?: msRest.ServiceCallback<Models.ReviewList>): Promise<Models.GetProductReviewsResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        baseSiteId,
        options
      },
      getProductReviewsOperationSpec,
      callback) as Promise<Models.GetProductReviewsResponse>;
  }

  /**
   * Creates a new customer review as an anonymous user.
   * @summary Creates a new customer review as an anonymous user.
   * @param productCode Product identifier
   * @param review Object contains review details like : rating, alias, headline, comment
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateProductReviewResponse>
   */
  createProductReview(productCode: string, review: Models.Review, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateProductReviewOptionalParams): Promise<Models.CreateProductReviewResponse>;
  /**
   * @param productCode Product identifier
   * @param review Object contains review details like : rating, alias, headline, comment
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  createProductReview(productCode: string, review: Models.Review, baseSiteId: string, callback: msRest.ServiceCallback<Models.Review>): void;
  /**
   * @param productCode Product identifier
   * @param review Object contains review details like : rating, alias, headline, comment
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  createProductReview(productCode: string, review: Models.Review, baseSiteId: string, options: Models.CommerceWebservicesV2CreateProductReviewOptionalParams, callback: msRest.ServiceCallback<Models.Review>): void;
  createProductReview(productCode: string, review: Models.Review, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateProductReviewOptionalParams | msRest.ServiceCallback<Models.Review>, callback?: msRest.ServiceCallback<Models.Review>): Promise<Models.CreateProductReviewResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        review,
        baseSiteId,
        options
      },
      createProductReviewOperationSpec,
      callback) as Promise<Models.CreateProductReviewResponse>;
  }

  /**
   * Returns a product's stock levels sorted by distance from the specified location, which is
   * provided using the free-text "location" parameter, or by using the longitude and latitude
   * parameters. The following two sets of parameters are available: location (required), currentPage
   * (optional), pageSize (optional); or longitude (required), latitude (required), currentPage
   * (optional), pageSize(optional).
   * @summary Get a product's stock level.
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLocationProductStockResponse>
   */
  getLocationProductStock(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetLocationProductStockOptionalParams): Promise<Models.GetLocationProductStockResponse>;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getLocationProductStock(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): void;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getLocationProductStock(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetLocationProductStockOptionalParams, callback: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): void;
  getLocationProductStock(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetLocationProductStockOptionalParams | msRest.ServiceCallback<Models.StoreFinderStockSearchPage>, callback?: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): Promise<Models.GetLocationProductStockResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        baseSiteId,
        options
      },
      getLocationProductStockOperationSpec,
      callback) as Promise<Models.GetLocationProductStockResponse>;
  }

  /**
   * In the response header, the "x-total-count" indicates the total number of a product's stock
   * levels. The following two sets of parameters are available: location (required); or longitude
   * (required), and latitude (required).
   * @summary Get header with a total number of product's stock levels.
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  countProductStockByLocation(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CountProductStockByLocationOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  countProductStockByLocation(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param productCode Product identifier
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  countProductStockByLocation(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2CountProductStockByLocationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  countProductStockByLocation(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CountProductStockByLocationOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        productCode,
        baseSiteId,
        options
      },
      countProductStockByLocationOperationSpec,
      callback);
  }

  /**
   * Returns a product's stock level for a particular store (in other words, for a particular point
   * of sale).
   * @summary Get a product's stock level for a store
   * @param baseSiteId Base site identifier
   * @param productCode Product identifier
   * @param storeName Store identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStoreProductStockResponse>
   */
  getStoreProductStock(baseSiteId: string, productCode: string, storeName: string, options?: Models.CommerceWebservicesV2GetStoreProductStockOptionalParams): Promise<Models.GetStoreProductStockResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param productCode Product identifier
   * @param storeName Store identifier
   * @param callback The callback
   */
  getStoreProductStock(baseSiteId: string, productCode: string, storeName: string, callback: msRest.ServiceCallback<Models.Stock>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param productCode Product identifier
   * @param storeName Store identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getStoreProductStock(baseSiteId: string, productCode: string, storeName: string, options: Models.CommerceWebservicesV2GetStoreProductStockOptionalParams, callback: msRest.ServiceCallback<Models.Stock>): void;
  getStoreProductStock(baseSiteId: string, productCode: string, storeName: string, options?: Models.CommerceWebservicesV2GetStoreProductStockOptionalParams | msRest.ServiceCallback<Models.Stock>, callback?: msRest.ServiceCallback<Models.Stock>): Promise<Models.GetStoreProductStockResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        productCode,
        storeName,
        options
      },
      getStoreProductStockOperationSpec,
      callback) as Promise<Models.GetStoreProductStockResponse>;
  }

  /**
   * Returns promotions defined for a current base site. Requests pertaining to promotions have been
   * developed for the previous version of promotions and vouchers and therefore some of them are
   * currently not compatible with the new promotion engine.
   * @summary Get a list of promotions.
   * @param type Defines what type of promotions should be returned. Values supported for that
   * parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product
   * promotions are returned</li><li>order: Only order promotions are returned</li></ul>. Possible
   * values include: 'all', 'product', 'order'
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPromotionsResponse>
   */
  getPromotions(type: Models.Type1, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionsOptionalParams): Promise<Models.GetPromotionsResponse>;
  /**
   * @param type Defines what type of promotions should be returned. Values supported for that
   * parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product
   * promotions are returned</li><li>order: Only order promotions are returned</li></ul>. Possible
   * values include: 'all', 'product', 'order'
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getPromotions(type: Models.Type1, baseSiteId: string, callback: msRest.ServiceCallback<Models.PromotionList>): void;
  /**
   * @param type Defines what type of promotions should be returned. Values supported for that
   * parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product
   * promotions are returned</li><li>order: Only order promotions are returned</li></ul>. Possible
   * values include: 'all', 'product', 'order'
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getPromotions(type: Models.Type1, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionsOptionalParams, callback: msRest.ServiceCallback<Models.PromotionList>): void;
  getPromotions(type: Models.Type1, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionsOptionalParams | msRest.ServiceCallback<Models.PromotionList>, callback?: msRest.ServiceCallback<Models.PromotionList>): Promise<Models.GetPromotionsResponse> {
    return this.sendOperationRequest(
      {
        type,
        baseSiteId,
        options
      },
      getPromotionsOperationSpec,
      callback) as Promise<Models.GetPromotionsResponse>;
  }

  /**
   * Returns details of a single promotion specified by a promotion code. Requests pertaining to
   * promotions have been developed for the previous version of promotions and vouchers and therefore
   * some of them are currently not compatible with the new promotion engine.
   * @summary Get a promotion based on code
   * @param code Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPromotionResponse>
   */
  getPromotion(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionOptionalParams): Promise<Models.GetPromotionResponse>;
  /**
   * @param code Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getPromotion(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Promotion>): void;
  /**
   * @param code Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getPromotion(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionOptionalParams, callback: msRest.ServiceCallback<Models.Promotion>): void;
  getPromotion(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionOptionalParams | msRest.ServiceCallback<Models.Promotion>, callback?: msRest.ServiceCallback<Models.Promotion>): Promise<Models.GetPromotionResponse> {
    return this.sendOperationRequest(
      {
        code,
        baseSiteId,
        options
      },
      getPromotionOperationSpec,
      callback) as Promise<Models.GetPromotionResponse>;
  }

  /**
   * Lists all store locations that are near the location specified in a query or based on latitude
   * and longitude.
   * @summary Get a list of store locations
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStoreLocationsResponse>
   */
  getStoreLocations(baseSiteId: string, options?: Models.CommerceWebservicesV2GetStoreLocationsOptionalParams): Promise<Models.GetStoreLocationsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getStoreLocations(baseSiteId: string, callback: msRest.ServiceCallback<Models.StoreFinderSearchPage>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getStoreLocations(baseSiteId: string, options: Models.CommerceWebservicesV2GetStoreLocationsOptionalParams, callback: msRest.ServiceCallback<Models.StoreFinderSearchPage>): void;
  getStoreLocations(baseSiteId: string, options?: Models.CommerceWebservicesV2GetStoreLocationsOptionalParams | msRest.ServiceCallback<Models.StoreFinderSearchPage>, callback?: msRest.ServiceCallback<Models.StoreFinderSearchPage>): Promise<Models.GetStoreLocationsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getStoreLocationsOperationSpec,
      callback) as Promise<Models.GetStoreLocationsResponse>;
  }

  /**
   * In the response header, the "x-total-count" indicates the number of all store locations that are
   * near the location specified in a query, or based on latitude and longitude.
   * @summary Get a header with the number of store locations.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  countStoreLocations(baseSiteId: string, options?: Models.CommerceWebservicesV2CountStoreLocationsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  countStoreLocations(baseSiteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  countStoreLocations(baseSiteId: string, options: Models.CommerceWebservicesV2CountStoreLocationsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  countStoreLocations(baseSiteId: string, options?: Models.CommerceWebservicesV2CountStoreLocationsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      countStoreLocationsOperationSpec,
      callback);
  }

  /**
   * Returns store location based on its unique name.
   * @summary Get a store location.
   * @param storeId Store identifier (currently store name)
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStoreLocationResponse>
   */
  getStoreLocation(storeId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetStoreLocationOptionalParams): Promise<Models.GetStoreLocationResponse>;
  /**
   * @param storeId Store identifier (currently store name)
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getStoreLocation(storeId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.PointOfService>): void;
  /**
   * @param storeId Store identifier (currently store name)
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getStoreLocation(storeId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetStoreLocationOptionalParams, callback: msRest.ServiceCallback<Models.PointOfService>): void;
  getStoreLocation(storeId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetStoreLocationOptionalParams | msRest.ServiceCallback<Models.PointOfService>, callback?: msRest.ServiceCallback<Models.PointOfService>): Promise<Models.GetStoreLocationResponse> {
    return this.sendOperationRequest(
      {
        storeId,
        baseSiteId,
        options
      },
      getStoreLocationOperationSpec,
      callback) as Promise<Models.GetStoreLocationResponse>;
  }

  /**
   * Lists all localized titles.
   * @summary Get a list of all localized titles.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTitlesResponse>
   */
  getTitles(baseSiteId: string, options?: Models.CommerceWebservicesV2GetTitlesOptionalParams): Promise<Models.GetTitlesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getTitles(baseSiteId: string, callback: msRest.ServiceCallback<Models.TitleList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getTitles(baseSiteId: string, options: Models.CommerceWebservicesV2GetTitlesOptionalParams, callback: msRest.ServiceCallback<Models.TitleList>): void;
  getTitles(baseSiteId: string, options?: Models.CommerceWebservicesV2GetTitlesOptionalParams | msRest.ServiceCallback<Models.TitleList>, callback?: msRest.ServiceCallback<Models.TitleList>): Promise<Models.GetTitlesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        options
      },
      getTitlesOperationSpec,
      callback) as Promise<Models.GetTitlesResponse>;
  }

  /**
   * Registers a customer. There are two options for registering a customer. The first option
   * requires the following parameters: login, password, firstName, lastName, titleCode. The second
   * option converts a guest to a customer. In this case, the required parameters are: guid,
   * password.
   * @summary  Registers a customer
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserResponse>
   */
  createUser(user: Models.UserSignUp, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateUserOptionalParams): Promise<Models.CreateUserResponse>;
  /**
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  createUser(user: Models.UserSignUp, baseSiteId: string, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  createUser(user: Models.UserSignUp, baseSiteId: string, options: Models.CommerceWebservicesV2CreateUserOptionalParams, callback: msRest.ServiceCallback<Models.User>): void;
  createUser(user: Models.UserSignUp, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateUserOptionalParams | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.CreateUserResponse> {
    return this.sendOperationRequest(
      {
        user,
        baseSiteId,
        options
      },
      createUserOperationSpec,
      callback) as Promise<Models.CreateUserResponse>;
  }

  /**
   * Returns customer profile.
   * @summary Get customer profile
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserResponse>
   */
  getUser(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOptionalParams): Promise<Models.GetUserResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserOptionalParams, callback: msRest.ServiceCallback<Models.User>): void;
  getUser(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOptionalParams | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.GetUserResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getUserOperationSpec,
      callback) as Promise<Models.GetUserResponse>;
  }

  /**
   * Updates customer profile. Attributes not provided in the request body will be defined again (set
   * to null or default).
   * @summary Updates customer profile
   * @param user User's object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceUser(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param user User's object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  replaceUser(user: Models.User, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param user User's object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUser(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceUser(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        user,
        baseSiteId,
        userId,
        options
      },
      replaceUserOperationSpec,
      callback);
  }

  /**
   * Removes customer profile.
   * @summary Delete customer profile.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeUser(baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  removeUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  removeUser(baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeUser(baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      removeUserOperationSpec,
      callback);
  }

  /**
   * Updates customer profile. Only attributes provided in the request body will be changed.
   * @summary Updates customer profile
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateUser(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  updateUser(user: Models.User, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param user User's object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  updateUser(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateUser(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        user,
        baseSiteId,
        userId,
        options
      },
      updateUserOperationSpec,
      callback);
  }

  /**
   * Returns customer's addresses.
   * @summary Get customer's addresses
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAddressesResponse>
   */
  getAddresses(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressesOptionalParams): Promise<Models.GetAddressesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getAddresses(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.AddressList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getAddresses(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressesOptionalParams, callback: msRest.ServiceCallback<Models.AddressList>): void;
  getAddresses(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressesOptionalParams | msRest.ServiceCallback<Models.AddressList>, callback?: msRest.ServiceCallback<Models.AddressList>): Promise<Models.GetAddressesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getAddressesOperationSpec,
      callback) as Promise<Models.GetAddressesResponse>;
  }

  /**
   * Creates a new address.
   * @summary Creates a new address.
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAddressResponse>
   */
  createAddress(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateAddressOptionalParams): Promise<Models.CreateAddressResponse>;
  /**
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  createAddress(address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Address>): void;
  /**
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  createAddress(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateAddressOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;
  createAddress(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateAddressOptionalParams | msRest.ServiceCallback<Models.Address>, callback?: msRest.ServiceCallback<Models.Address>): Promise<Models.CreateAddressResponse> {
    return this.sendOperationRequest(
      {
        address,
        baseSiteId,
        userId,
        options
      },
      createAddressOperationSpec,
      callback) as Promise<Models.CreateAddressResponse>;
  }

  /**
   * Verifies address.
   * @summary Verifies address.
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.ValidateAddressResponse>
   */
  validateAddress(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ValidateAddressOptionalParams): Promise<Models.ValidateAddressResponse>;
  /**
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  validateAddress(address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.AddressValidation>): void;
  /**
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  validateAddress(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2ValidateAddressOptionalParams, callback: msRest.ServiceCallback<Models.AddressValidation>): void;
  validateAddress(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ValidateAddressOptionalParams | msRest.ServiceCallback<Models.AddressValidation>, callback?: msRest.ServiceCallback<Models.AddressValidation>): Promise<Models.ValidateAddressResponse> {
    return this.sendOperationRequest(
      {
        address,
        baseSiteId,
        userId,
        options
      },
      validateAddressOperationSpec,
      callback) as Promise<Models.ValidateAddressResponse>;
  }

  /**
   * Returns detailed information about address with a given id.
   * @summary Get info about address
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAddressResponse>
   */
  getAddress(addressId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressOptionalParams): Promise<Models.GetAddressResponse>;
  /**
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getAddress(addressId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Address>): void;
  /**
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getAddress(addressId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;
  getAddress(addressId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressOptionalParams | msRest.ServiceCallback<Models.Address>, callback?: msRest.ServiceCallback<Models.Address>): Promise<Models.GetAddressResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        baseSiteId,
        userId,
        options
      },
      getAddressOperationSpec,
      callback) as Promise<Models.GetAddressResponse>;
  }

  /**
   * Updates the address. Attributes not provided in the request will be defined again (set to null
   * or default).
   * @summary Updates the address
   * @param addressId Address identifier.
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param addressId Address identifier.
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  replaceAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param addressId Address identifier.
   * @param address Address object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        address,
        baseSiteId,
        userId,
        options
      },
      replaceAddressOperationSpec,
      callback);
  }

  /**
   * Removes customer's address.
   * @summary Delete customer's address.
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeAddress(addressId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  removeAddress(addressId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param addressId Address identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  removeAddress(addressId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeAddress(addressId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        baseSiteId,
        userId,
        options
      },
      removeAddressOperationSpec,
      callback);
  }

  /**
   * Updates the address. Only attributes provided in the request body will be changed.
   * @summary Updates the address
   * @param addressId Address identifier.
   * @param address Address object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param addressId Address identifier.
   * @param address Address object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  updateAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param addressId Address identifier.
   * @param address Address object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateAddress(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        address,
        baseSiteId,
        userId,
        options
      },
      updateAddressOperationSpec,
      callback);
  }

  /**
   * Lists all customer carts.
   * @summary Get all customer carts.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartsResponse>
   */
  getCarts(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCartsOptionalParams): Promise<Models.GetCartsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getCarts(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.CartList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getCarts(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetCartsOptionalParams, callback: msRest.ServiceCallback<Models.CartList>): void;
  getCarts(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCartsOptionalParams | msRest.ServiceCallback<Models.CartList>, callback?: msRest.ServiceCallback<Models.CartList>): Promise<Models.GetCartsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getCartsOperationSpec,
      callback) as Promise<Models.GetCartsResponse>;
  }

  /**
   * Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in
   * the request).
   * @summary Creates or restore a cart for a user.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCartResponse>
   */
  createCart(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateCartOptionalParams): Promise<Models.CreateCartResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  createCart(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Cart>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  createCart(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateCartOptionalParams, callback: msRest.ServiceCallback<Models.Cart>): void;
  createCart(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateCartOptionalParams | msRest.ServiceCallback<Models.Cart>, callback?: msRest.ServiceCallback<Models.Cart>): Promise<Models.CreateCartResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      createCartOperationSpec,
      callback) as Promise<Models.CreateCartResponse>;
  }

  /**
   * Returns the cart with a given identifier.
   * @summary Get a cart with a given identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartResponse>
   */
  getCart(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartOptionalParams): Promise<Models.GetCartResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCart(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.Cart>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCart(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartOptionalParams, callback: msRest.ServiceCallback<Models.Cart>): void;
  getCart(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartOptionalParams | msRest.ServiceCallback<Models.Cart>, callback?: msRest.ServiceCallback<Models.Cart>): Promise<Models.GetCartResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartOperationSpec,
      callback) as Promise<Models.GetCartResponse>;
  }

  /**
   * Deletes a cart with a given cart id.
   * @summary Deletes a cart with a given cart id.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCart(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCart(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCart(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCart(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartOperationSpec,
      callback);
  }

  /**
   * Creates an address and assigns it to the cart as the delivery address.
   * @summary Creates a delivery address for the cart.
   * @param address Request body parameter that contains details such as the customer's first name
   * (firstName), the customer's last name (lastName), the customer's title (titleCode), the country
   * (country.isocode), the first part of the address (line1), the second part of the address
   * (line2), the town (town), the postal code (postalCode), and the region (region.isocode).
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCartDeliveryAddressResponse>
   */
  createCartDeliveryAddress(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateCartDeliveryAddressOptionalParams): Promise<Models.CreateCartDeliveryAddressResponse>;
  /**
   * @param address Request body parameter that contains details such as the customer's first name
   * (firstName), the customer's last name (lastName), the customer's title (titleCode), the country
   * (country.isocode), the first part of the address (line1), the second part of the address
   * (line2), the town (town), the postal code (postalCode), and the region (region.isocode).
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  createCartDeliveryAddress(address: Models.Address, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.Address>): void;
  /**
   * @param address Request body parameter that contains details such as the customer's first name
   * (firstName), the customer's last name (lastName), the customer's title (titleCode), the country
   * (country.isocode), the first part of the address (line1), the second part of the address
   * (line2), the town (town), the postal code (postalCode), and the region (region.isocode).
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  createCartDeliveryAddress(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2CreateCartDeliveryAddressOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;
  createCartDeliveryAddress(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateCartDeliveryAddressOptionalParams | msRest.ServiceCallback<Models.Address>, callback?: msRest.ServiceCallback<Models.Address>): Promise<Models.CreateCartDeliveryAddressResponse> {
    return this.sendOperationRequest(
      {
        address,
        baseSiteId,
        userId,
        cartId,
        options
      },
      createCartDeliveryAddressOperationSpec,
      callback) as Promise<Models.CreateCartDeliveryAddressResponse>;
  }

  /**
   * Sets a delivery address for the cart. The address country must be placed among the delivery
   * countries of the current base store.
   * @summary Sets a delivery address for the cart.
   * @param addressId Address identifier
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param addressId Address identifier
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  replaceCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param addressId Address identifier
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        addressId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      replaceCartDeliveryAddressOperationSpec,
      callback);
  }

  /**
   * Deletes the delivery address from the cart.
   * @summary Deletes the delivery address from the cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartDeliveryAddressOperationSpec,
      callback);
  }

  /**
   * Explicitly clones a cart.
   * @summary Explicitly clones a cart.
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.DoCartCloneResponse>
   */
  doCartClone(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoCartCloneOptionalParams): Promise<Models.DoCartCloneResponse>;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  doCartClone(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  doCartClone(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2DoCartCloneOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  doCartClone(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoCartCloneOptionalParams | msRest.ServiceCallback<Models.SaveCartResult>, callback?: msRest.ServiceCallback<Models.SaveCartResult>): Promise<Models.DoCartCloneResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      doCartCloneOperationSpec,
      callback) as Promise<Models.DoCartCloneResponse>;
  }

  /**
   * Returns a list of stores that have all the pick-up items in stock.
   *
   * Note, if there are no stores that have all the pick up items in stock, or all items are already
   * set to the same pick up location, the response returns an empty list.
   * @summary Get consolidated pickup options.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConsolidatedPickupLocationsResponse>
   */
  getConsolidatedPickupLocations(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetConsolidatedPickupLocationsOptionalParams): Promise<Models.GetConsolidatedPickupLocationsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getConsolidatedPickupLocations(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PointOfServiceList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getConsolidatedPickupLocations(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetConsolidatedPickupLocationsOptionalParams, callback: msRest.ServiceCallback<Models.PointOfServiceList>): void;
  getConsolidatedPickupLocations(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetConsolidatedPickupLocationsOptionalParams | msRest.ServiceCallback<Models.PointOfServiceList>, callback?: msRest.ServiceCallback<Models.PointOfServiceList>): Promise<Models.GetConsolidatedPickupLocationsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getConsolidatedPickupLocationsOperationSpec,
      callback) as Promise<Models.GetConsolidatedPickupLocationsResponse>;
  }

  /**
   * Specifies one store location where all items will be picked up.
   *
   * Note, if any of the items are not available at the specified location, these items are removed
   * from the cart.
   * @summary Handles the consolidating pickup locations.
   * @param storeName The name of the store where items will be picked up
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateConsolidatedPickupLocationResponse>
   */
  createConsolidatedPickupLocation(storeName: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateConsolidatedPickupLocationOptionalParams): Promise<Models.CreateConsolidatedPickupLocationResponse>;
  /**
   * @param storeName The name of the store where items will be picked up
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  createConsolidatedPickupLocation(storeName: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.CartModificationList>): void;
  /**
   * @param storeName The name of the store where items will be picked up
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  createConsolidatedPickupLocation(storeName: string, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2CreateConsolidatedPickupLocationOptionalParams, callback: msRest.ServiceCallback<Models.CartModificationList>): void;
  createConsolidatedPickupLocation(storeName: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateConsolidatedPickupLocationOptionalParams | msRest.ServiceCallback<Models.CartModificationList>, callback?: msRest.ServiceCallback<Models.CartModificationList>): Promise<Models.CreateConsolidatedPickupLocationResponse> {
    return this.sendOperationRequest(
      {
        storeName,
        baseSiteId,
        userId,
        cartId,
        options
      },
      createConsolidatedPickupLocationOperationSpec,
      callback) as Promise<Models.CreateConsolidatedPickupLocationResponse>;
  }

  /**
   * Returns the delivery mode selected for the cart.
   * @summary Get the delivery mode selected for the cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartDeliveryModeResponse>
   */
  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams): Promise<Models.GetCartDeliveryModeResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.DeliveryMode>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams, callback: msRest.ServiceCallback<Models.DeliveryMode>): void;
  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams | msRest.ServiceCallback<Models.DeliveryMode>, callback?: msRest.ServiceCallback<Models.DeliveryMode>): Promise<Models.GetCartDeliveryModeResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartDeliveryModeOperationSpec,
      callback) as Promise<Models.GetCartDeliveryModeResponse>;
  }

  /**
   * Sets the delivery mode with a given identifier for the cart.
   * @summary Sets the delivery mode for a cart.
   * @param deliveryModeId Delivery mode identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deliveryModeId Delivery mode identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  replaceCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deliveryModeId Delivery mode identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deliveryModeId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      replaceCartDeliveryModeOperationSpec,
      callback);
  }

  /**
   * Deletes the delivery mode from the cart.
   * @summary Deletes the delivery mode from the cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartDeliveryModeOperationSpec,
      callback);
  }

  /**
   * Returns all delivery modes supported for the current base store and cart delivery address. A
   * delivery address must be set for the cart, otherwise an empty list will be returned.
   * @summary Get all delivery modes for the current store and delivery address.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartDeliveryModesResponse>
   */
  getCartDeliveryModes(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModesOptionalParams): Promise<Models.GetCartDeliveryModesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartDeliveryModes(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.DeliveryModeList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartDeliveryModes(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartDeliveryModesOptionalParams, callback: msRest.ServiceCallback<Models.DeliveryModeList>): void;
  getCartDeliveryModes(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModesOptionalParams | msRest.ServiceCallback<Models.DeliveryModeList>, callback?: msRest.ServiceCallback<Models.DeliveryModeList>): Promise<Models.GetCartDeliveryModesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartDeliveryModesOperationSpec,
      callback) as Promise<Models.GetCartDeliveryModesResponse>;
  }

  /**
   * Assigns an email to the cart. This step is required to make a guest checkout.
   * @summary Assigns an email to the cart.
   * @param email Email of the guest user. It will be used during the checkout process.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceCartGuestUser(email: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param email Email of the guest user. It will be used during the checkout process.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  replaceCartGuestUser(email: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param email Email of the guest user. It will be used during the checkout process.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCartGuestUser(email: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceCartGuestUser(email: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        email,
        baseSiteId,
        userId,
        cartId,
        options
      },
      replaceCartGuestUserOperationSpec,
      callback);
  }

  /**
   * Returns cart entries.
   * @summary Get cart entries.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartEntriesResponse>
   */
  getCartEntries(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntriesOptionalParams): Promise<Models.GetCartEntriesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartEntries(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.OrderEntryList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartEntries(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntriesOptionalParams, callback: msRest.ServiceCallback<Models.OrderEntryList>): void;
  getCartEntries(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntriesOptionalParams | msRest.ServiceCallback<Models.OrderEntryList>, callback?: msRest.ServiceCallback<Models.OrderEntryList>): Promise<Models.GetCartEntriesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartEntriesOperationSpec,
      callback) as Promise<Models.GetCartEntriesResponse>;
  }

  /**
   * Adds a product to the cart.
   * @summary Adds a product to the cart.
   * @param entry Request body parameter that contains details such as the product code
   * (product.code), the quantity of product (quantity), and the pickup store name
   * (deliveryPointOfService.name).
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCartEntryResponse>
   */
  createCartEntry(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateCartEntryOptionalParams): Promise<Models.CreateCartEntryResponse>;
  /**
   * @param entry Request body parameter that contains details such as the product code
   * (product.code), the quantity of product (quantity), and the pickup store name
   * (deliveryPointOfService.name).
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  createCartEntry(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;
  /**
   * @param entry Request body parameter that contains details such as the product code
   * (product.code), the quantity of product (quantity), and the pickup store name
   * (deliveryPointOfService.name).
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  createCartEntry(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2CreateCartEntryOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;
  createCartEntry(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateCartEntryOptionalParams | msRest.ServiceCallback<Models.CartModification>, callback?: msRest.ServiceCallback<Models.CartModification>): Promise<Models.CreateCartEntryResponse> {
    return this.sendOperationRequest(
      {
        entry,
        userId,
        cartId,
        baseSiteId,
        options
      },
      createCartEntryOperationSpec,
      callback) as Promise<Models.CreateCartEntryResponse>;
  }

  /**
   * Returns the details of the cart entries.
   * @summary Get the details of the cart entries.
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartEntryResponse>
   */
  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntryOptionalParams): Promise<Models.GetCartEntryResponse>;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.OrderEntry>): void;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntryOptionalParams, callback: msRest.ServiceCallback<Models.OrderEntry>): void;
  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntryOptionalParams | msRest.ServiceCallback<Models.OrderEntry>, callback?: msRest.ServiceCallback<Models.OrderEntry>): Promise<Models.GetCartEntryResponse> {
    return this.sendOperationRequest(
      {
        entryNumber,
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartEntryOperationSpec,
      callback) as Promise<Models.GetCartEntryResponse>;
  }

  /**
   * Updates the quantity of a single cart entry and the details of the store where the cart entry
   * will be picked up. Attributes not provided in request will be defined again (set to null or
   * default)
   * @summary Set quantity and store details of a cart entry.
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCartEntryResponse>
   */
  replaceCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ReplaceCartEntryOptionalParams): Promise<Models.ReplaceCartEntryResponse>;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  replaceCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2ReplaceCartEntryOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;
  replaceCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ReplaceCartEntryOptionalParams | msRest.ServiceCallback<Models.CartModification>, callback?: msRest.ServiceCallback<Models.CartModification>): Promise<Models.ReplaceCartEntryResponse> {
    return this.sendOperationRequest(
      {
        entryNumber,
        entry,
        userId,
        cartId,
        baseSiteId,
        options
      },
      replaceCartEntryOperationSpec,
      callback) as Promise<Models.ReplaceCartEntryResponse>;
  }

  /**
   * Deletes cart entry.
   * @summary Deletes cart entry.
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        entryNumber,
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartEntryOperationSpec,
      callback);
  }

  /**
   * Updates the quantity of a single cart entry and the details of the store where the cart entry
   * will be picked up.
   * @summary Update quantity and store details of a cart entry.
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCartEntryResponse>
   */
  updateCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2UpdateCartEntryOptionalParams): Promise<Models.UpdateCartEntryResponse>;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  updateCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;
  /**
   * @param entryNumber The entry number. Each entry in a cart has an entry number. Cart entries are
   * numbered in ascending order, starting with zero (0).
   * @param entry Request body parameter that contains details such as the quantity of product
   * (quantity), and the pickup store name (deliveryPointOfService.name)
   *
   * The DTO is in XML or .json format.
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2UpdateCartEntryOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;
  updateCartEntry(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2UpdateCartEntryOptionalParams | msRest.ServiceCallback<Models.CartModification>, callback?: msRest.ServiceCallback<Models.CartModification>): Promise<Models.UpdateCartEntryResponse> {
    return this.sendOperationRequest(
      {
        entryNumber,
        entry,
        userId,
        cartId,
        baseSiteId,
        options
      },
      updateCartEntryOperationSpec,
      callback) as Promise<Models.UpdateCartEntryResponse>;
  }

  /**
   * Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore).
   * The cart is not actually deleted from the database. But with the removal of the saved cart
   * attributes, this cart will be taken care of by the cart removal job just like any other cart.
   * @summary Flag a cart for deletion.
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.DoUpdateFlagForDeletionResponse>
   */
  doUpdateFlagForDeletion(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoUpdateFlagForDeletionOptionalParams): Promise<Models.DoUpdateFlagForDeletionResponse>;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  doUpdateFlagForDeletion(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  doUpdateFlagForDeletion(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2DoUpdateFlagForDeletionOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  doUpdateFlagForDeletion(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoUpdateFlagForDeletionOptionalParams | msRest.ServiceCallback<Models.SaveCartResult>, callback?: msRest.ServiceCallback<Models.SaveCartResult>): Promise<Models.DoUpdateFlagForDeletionResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      doUpdateFlagForDeletionOperationSpec,
      callback) as Promise<Models.DoUpdateFlagForDeletionResponse>;
  }

  /**
   * Returns the necessary information for creating a subscription that contacts the payment provider
   * directly. This information contains the payment provider URL and a list of parameters that are
   * needed to create the subscription.
   * @summary Get information needed for create subscription
   * @param responseUrl The URL that the payment provider uses to return payment information.
   * Possible values for responseUrl include the following: “orderPage_cancelResponseURL”,
   * “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSopPaymentRequestDetailsResponse>
   */
  getSopPaymentRequestDetails(responseUrl: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSopPaymentRequestDetailsOptionalParams): Promise<Models.GetSopPaymentRequestDetailsResponse>;
  /**
   * @param responseUrl The URL that the payment provider uses to return payment information.
   * Possible values for responseUrl include the following: “orderPage_cancelResponseURL”,
   * “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getSopPaymentRequestDetails(responseUrl: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PaymentRequest>): void;
  /**
   * @param responseUrl The URL that the payment provider uses to return payment information.
   * Possible values for responseUrl include the following: “orderPage_cancelResponseURL”,
   * “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getSopPaymentRequestDetails(responseUrl: string, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetSopPaymentRequestDetailsOptionalParams, callback: msRest.ServiceCallback<Models.PaymentRequest>): void;
  getSopPaymentRequestDetails(responseUrl: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSopPaymentRequestDetailsOptionalParams | msRest.ServiceCallback<Models.PaymentRequest>, callback?: msRest.ServiceCallback<Models.PaymentRequest>): Promise<Models.GetSopPaymentRequestDetailsResponse> {
    return this.sendOperationRequest(
      {
        responseUrl,
        baseSiteId,
        userId,
        cartId,
        options
      },
      getSopPaymentRequestDetailsOperationSpec,
      callback) as Promise<Models.GetSopPaymentRequestDetailsResponse>;
  }

  /**
   * Returns information related to creating subscription request results. If there is no response
   * from the payment provider, a "202 Accepted" status is returned. If the subscription is created
   * successfully, the payment details are returned. Otherwise, an error response is returned.
   *
   * Note, the “Try it out” button is not enabled for this method (always returns an error) because
   * the Extended Carts Controller handles parameters differently, depending on which payment
   * provider is used. For more information about this controller, please refer to the
   * “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
   * @summary Get information about create subscription request results
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSopPaymentResponseResponse>
   */
  getSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSopPaymentResponseOptionalParams): Promise<Models.GetSopPaymentResponseResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetSopPaymentResponseOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  getSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSopPaymentResponseOptionalParams | msRest.ServiceCallback<Models.PaymentDetails>, callback?: msRest.ServiceCallback<Models.PaymentDetails>): Promise<Models.GetSopPaymentResponseResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getSopPaymentResponseOperationSpec,
      callback) as Promise<Models.GetSopPaymentResponseResponse>;
  }

  /**
   * Handles the response from the payment provider and creates payment details.
   *
   * Note, the “Try it out” button is not enabled for this method (always returns an error) because
   * the Extended Carts Controller handles parameters differently, depending on which payment
   * provider is used. For more information about this controller, please refer to the
   * “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
   * @summary Handles response from payment provider and create payment details
   * @param fields Response configuration. This is the list of fields that should be returned in the
   * response body. Possible values include: 'BASIC', 'DEFAULT', 'FULL'
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.DoHandleSopPaymentResponseResponse>
   */
  doHandleSopPaymentResponse(fields: Models.Fields71, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<Models.DoHandleSopPaymentResponseResponse>;
  /**
   * @param fields Response configuration. This is the list of fields that should be returned in the
   * response body. Possible values include: 'BASIC', 'DEFAULT', 'FULL'
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  doHandleSopPaymentResponse(fields: Models.Fields71, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  /**
   * @param fields Response configuration. This is the list of fields that should be returned in the
   * response body. Possible values include: 'BASIC', 'DEFAULT', 'FULL'
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  doHandleSopPaymentResponse(fields: Models.Fields71, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  doHandleSopPaymentResponse(fields: Models.Fields71, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaymentDetails>, callback?: msRest.ServiceCallback<Models.PaymentDetails>): Promise<Models.DoHandleSopPaymentResponseResponse> {
    return this.sendOperationRequest(
      {
        fields,
        baseSiteId,
        userId,
        cartId,
        options
      },
      doHandleSopPaymentResponseOperationSpec,
      callback) as Promise<Models.DoHandleSopPaymentResponseResponse>;
  }

  /**
   * Deletes the payment provider response related to the specified cart.
   * @summary Deletes payment provider response related to cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeSopPaymentResponse(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeSopPaymentResponseOperationSpec,
      callback);
  }

  /**
   * Defines the details of a new credit card, and assigns this payment option to the cart.
   * @summary Defines and assigns details of a new credit card payment to the cart.
   * @param paymentDetails Request body parameter that contains details such as the name on the card
   * (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of
   * the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment
   * details should be saved (saved), whether the payment details should be set as default
   * (defaultPaymentInfo), and the billing address (billingAddress.firstName,
   * billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode,
   * billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode,
   * billingAddress.region.isocode)
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCartPaymentDetailsResponse>
   */
  createCartPaymentDetails(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateCartPaymentDetailsOptionalParams): Promise<Models.CreateCartPaymentDetailsResponse>;
  /**
   * @param paymentDetails Request body parameter that contains details such as the name on the card
   * (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of
   * the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment
   * details should be saved (saved), whether the payment details should be set as default
   * (defaultPaymentInfo), and the billing address (billingAddress.firstName,
   * billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode,
   * billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode,
   * billingAddress.region.isocode)
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  createCartPaymentDetails(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  /**
   * @param paymentDetails Request body parameter that contains details such as the name on the card
   * (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of
   * the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment
   * details should be saved (saved), whether the payment details should be set as default
   * (defaultPaymentInfo), and the billing address (billingAddress.firstName,
   * billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode,
   * billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode,
   * billingAddress.region.isocode)
   *
   * The DTO is in XML or .json format.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  createCartPaymentDetails(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2CreateCartPaymentDetailsOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  createCartPaymentDetails(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateCartPaymentDetailsOptionalParams | msRest.ServiceCallback<Models.PaymentDetails>, callback?: msRest.ServiceCallback<Models.PaymentDetails>): Promise<Models.CreateCartPaymentDetailsResponse> {
    return this.sendOperationRequest(
      {
        paymentDetails,
        baseSiteId,
        userId,
        cartId,
        options
      },
      createCartPaymentDetailsOperationSpec,
      callback) as Promise<Models.CreateCartPaymentDetailsResponse>;
  }

  /**
   * Sets credit card payment details for the cart.
   * @summary Sets credit card payment details for the cart.
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceCartPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  replaceCartPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCartPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceCartPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        paymentDetailsId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      replaceCartPaymentDetailsOperationSpec,
      callback);
  }

  /**
   * Returns information about the promotions applied on the cart. Requests pertaining to promotions
   * have been developed for the previous version of promotions and vouchers, and as a result, some
   * of them are currently not compatible with the new promotions engine.
   * @summary Get information about promotions applied on cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartPromotionsResponse>
   */
  getCartPromotions(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartPromotionsOptionalParams): Promise<Models.GetCartPromotionsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartPromotions(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartPromotions(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartPromotionsOptionalParams, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;
  getCartPromotions(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartPromotionsOptionalParams | msRest.ServiceCallback<Models.PromotionResultList>, callback?: msRest.ServiceCallback<Models.PromotionResultList>): Promise<Models.GetCartPromotionsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartPromotionsOperationSpec,
      callback) as Promise<Models.GetCartPromotionsResponse>;
  }

  /**
   * Enables a promotion for the order based on the promotionId defined for the cart. Requests
   * pertaining to promotions have been developed for the previous version of promotions and
   * vouchers, and as a result, some of them are currently not compatible with the new promotions
   * engine.
   * @summary Enables promotions based on the promotionsId of the cart.
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  doApplyCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  doApplyCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  doApplyCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doApplyCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        promotionId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      doApplyCartPromotionOperationSpec,
      callback);
  }

  /**
   * Returns information about a promotion (with a specific promotionId), that has been applied on
   * the cart. Requests pertaining to promotions have been developed for the previous version of
   * promotions and vouchers, and as a result, some of them are currently not compatible with the new
   * promotions engine.
   * @summary Get information about promotion applied on cart.
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartPromotionResponse>
   */
  getCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartPromotionOptionalParams): Promise<Models.GetCartPromotionResponse>;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartPromotionOptionalParams, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;
  getCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartPromotionOptionalParams | msRest.ServiceCallback<Models.PromotionResultList>, callback?: msRest.ServiceCallback<Models.PromotionResultList>): Promise<Models.GetCartPromotionResponse> {
    return this.sendOperationRequest(
      {
        promotionId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartPromotionOperationSpec,
      callback) as Promise<Models.GetCartPromotionResponse>;
  }

  /**
   * Disables the promotion for the order based on the promotionId defined for the cart. Requests
   * pertaining to promotions have been developed for the previous version of promotions and
   * vouchers, and as a result, some of them are currently not compatible with the new promotions
   * engine.
   * @summary Disables the promotion based on the promotionsId of the cart.
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param promotionId Promotion identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCartPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        promotionId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartPromotionOperationSpec,
      callback);
  }

  /**
   * Restore a saved cart.
   * @summary Restore a saved cart.
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.DoUpdateSavedCartResponse>
   */
  doUpdateSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoUpdateSavedCartOptionalParams): Promise<Models.DoUpdateSavedCartResponse>;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  doUpdateSavedCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  doUpdateSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2DoUpdateSavedCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  doUpdateSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoUpdateSavedCartOptionalParams | msRest.ServiceCallback<Models.SaveCartResult>, callback?: msRest.ServiceCallback<Models.SaveCartResult>): Promise<Models.DoUpdateSavedCartResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      doUpdateSavedCartOperationSpec,
      callback) as Promise<Models.DoUpdateSavedCartResponse>;
  }

  /**
   * Explicitly saves a cart.
   * @summary Explicitly saves a cart.
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.DoSaveCartResponse>
   */
  doSaveCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoSaveCartOptionalParams): Promise<Models.DoSaveCartResponse>;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  doSaveCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  doSaveCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2DoSaveCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  doSaveCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2DoSaveCartOptionalParams | msRest.ServiceCallback<Models.SaveCartResult>, callback?: msRest.ServiceCallback<Models.SaveCartResult>): Promise<Models.DoSaveCartResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      doSaveCartOperationSpec,
      callback) as Promise<Models.DoSaveCartResponse>;
  }

  /**
   * Returns a saved cart for an authenticated user. The cart is identified using the "cartId"
   * parameter.
   * @summary Get a saved cart.
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSavedCartResponse>
   */
  getSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetSavedCartOptionalParams): Promise<Models.GetSavedCartResponse>;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getSavedCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  /**
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetSavedCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;
  getSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetSavedCartOptionalParams | msRest.ServiceCallback<Models.SaveCartResult>, callback?: msRest.ServiceCallback<Models.SaveCartResult>): Promise<Models.GetSavedCartResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      getSavedCartOperationSpec,
      callback) as Promise<Models.GetSavedCartResponse>;
  }

  /**
   * Returns a list of vouchers applied to the cart.
   * @summary Get a list of vouchers applied to the cart.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCartVouchersResponse>
   */
  getCartVouchers(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartVouchersOptionalParams): Promise<Models.GetCartVouchersResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  getCartVouchers(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.VoucherList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  getCartVouchers(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartVouchersOptionalParams, callback: msRest.ServiceCallback<Models.VoucherList>): void;
  getCartVouchers(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartVouchersOptionalParams | msRest.ServiceCallback<Models.VoucherList>, callback?: msRest.ServiceCallback<Models.VoucherList>): Promise<Models.GetCartVouchersResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        cartId,
        options
      },
      getCartVouchersOperationSpec,
      callback) as Promise<Models.GetCartVouchersResponse>;
  }

  /**
   * Applies a voucher based on the voucherId defined for the cart.
   * @summary Applies a voucher based on the voucherId defined for the cart.
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  doApplyCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  doApplyCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  doApplyCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doApplyCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        voucherId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      doApplyCartVoucherOperationSpec,
      callback);
  }

  /**
   * Deletes a voucher based on the voucherId defined for the current cart.
   * @summary Deletes a voucher defined for the current cart.
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param callback The callback
   */
  removeCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param voucherId Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param cartId Cart identifier: cart code for logged in user, cart guid for anonymous user,
   * 'current' for the last modified cart
   * @param options The optional parameters
   * @param callback The callback
   */
  removeCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeCartVoucher(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        voucherId,
        baseSiteId,
        userId,
        cartId,
        options
      },
      removeCartVoucherOperationSpec,
      callback);
  }

  /**
   * @summary A user can give consent.
   * @param consentTemplateId Consent template ID.
   * @param consentTemplateVersion Consent template version.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.DoGiveConsentResponse>
   */
  doGiveConsent(consentTemplateId: string, consentTemplateVersion: number, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<Models.DoGiveConsentResponse>;
  /**
   * @param consentTemplateId Consent template ID.
   * @param consentTemplateVersion Consent template version.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  doGiveConsent(consentTemplateId: string, consentTemplateVersion: number, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.ConsentTemplate>): void;
  /**
   * @param consentTemplateId Consent template ID.
   * @param consentTemplateVersion Consent template version.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  doGiveConsent(consentTemplateId: string, consentTemplateVersion: number, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConsentTemplate>): void;
  doGiveConsent(consentTemplateId: string, consentTemplateVersion: number, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConsentTemplate>, callback?: msRest.ServiceCallback<Models.ConsentTemplate>): Promise<Models.DoGiveConsentResponse> {
    return this.sendOperationRequest(
      {
        consentTemplateId,
        consentTemplateVersion,
        baseSiteId,
        userId,
        options
      },
      doGiveConsentOperationSpec,
      callback) as Promise<Models.DoGiveConsentResponse>;
  }

  /**
   * If the user consent was given, the consent is withdrawn. If consent was already withdrawn then
   * returns consent already withdrawn error. If there is no such consent then returns not found. If
   * the current user is an anonymous user then returns access denied error.
   * @summary Withdraw the user consent for a given consent code.
   * @param consentCode consentCode
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeConsent(consentCode: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param consentCode consentCode
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  removeConsent(consentCode: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param consentCode consentCode
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  removeConsent(consentCode: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeConsent(consentCode: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        consentCode,
        baseSiteId,
        userId,
        options
      },
      removeConsentOperationSpec,
      callback);
  }

  /**
   * If user has not given or withdrawn consent to any of the template, no given or withdraw date is
   * returned.
   * @summary Fetch the list of consents
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConsentTemplatesResponse>
   */
  getConsentTemplates(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetConsentTemplatesOptionalParams): Promise<Models.GetConsentTemplatesResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getConsentTemplates(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.ConsentTemplateList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getConsentTemplates(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetConsentTemplatesOptionalParams, callback: msRest.ServiceCallback<Models.ConsentTemplateList>): void;
  getConsentTemplates(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetConsentTemplatesOptionalParams | msRest.ServiceCallback<Models.ConsentTemplateList>, callback?: msRest.ServiceCallback<Models.ConsentTemplateList>): Promise<Models.GetConsentTemplatesResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getConsentTemplatesOperationSpec,
      callback) as Promise<Models.GetConsentTemplatesResponse>;
  }

  /**
   * If user has not given or withdrawn consent to the template, no given or withdraw date is
   * returned.
   * @summary Fetch the consent.
   * @param consentTemplateId Consent template id.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConsentTemplateResponse>
   */
  getConsentTemplate(consentTemplateId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetConsentTemplateOptionalParams): Promise<Models.GetConsentTemplateResponse>;
  /**
   * @param consentTemplateId Consent template id.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getConsentTemplate(consentTemplateId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.ConsentTemplate>): void;
  /**
   * @param consentTemplateId Consent template id.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getConsentTemplate(consentTemplateId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetConsentTemplateOptionalParams, callback: msRest.ServiceCallback<Models.ConsentTemplate>): void;
  getConsentTemplate(consentTemplateId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetConsentTemplateOptionalParams | msRest.ServiceCallback<Models.ConsentTemplate>, callback?: msRest.ServiceCallback<Models.ConsentTemplate>): Promise<Models.GetConsentTemplateResponse> {
    return this.sendOperationRequest(
      {
        consentTemplateId,
        baseSiteId,
        userId,
        options
      },
      getConsentTemplateOperationSpec,
      callback) as Promise<Models.GetConsentTemplateResponse>;
  }

  /**
   * Returns all customer groups of a customer.
   * @summary Get all customer groups of a customer.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserCustomerGroupsResponse>
   */
  getUserCustomerGroups(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserCustomerGroupsOptionalParams): Promise<Models.GetUserCustomerGroupsResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getUserCustomerGroups(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.UserGroupList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserCustomerGroups(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserCustomerGroupsOptionalParams, callback: msRest.ServiceCallback<Models.UserGroupList>): void;
  getUserCustomerGroups(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserCustomerGroupsOptionalParams | msRest.ServiceCallback<Models.UserGroupList>, callback?: msRest.ServiceCallback<Models.UserGroupList>): Promise<Models.GetUserCustomerGroupsResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getUserCustomerGroupsOperationSpec,
      callback) as Promise<Models.GetUserCustomerGroupsResponse>;
  }

  /**
   * Changes a customer's login name. Requires the customer's current password.
   * @summary Changes customer's login name.
   * @param newLogin Customer's new login name. Customer login is case insensitive.
   * @param password Customer's current password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceUserLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param newLogin Customer's new login name. Customer login is case insensitive.
   * @param password Customer's current password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  replaceUserLogin(newLogin: string, password: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param newLogin Customer's new login name. Customer login is case insensitive.
   * @param password Customer's current password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replaceUserLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        newLogin,
        password,
        baseSiteId,
        userId,
        options
      },
      replaceUserLoginOperationSpec,
      callback);
  }

  /**
   * Returns order history data for all orders placed by a specified user for a specified base store.
   * The response can display the results across multiple pages, if required.
   * @summary Get order history for user.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserOrderHistoryResponse>
   */
  getUserOrderHistory(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOrderHistoryOptionalParams): Promise<Models.GetUserOrderHistoryResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getUserOrderHistory(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.OrderHistoryList>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserOrderHistory(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserOrderHistoryOptionalParams, callback: msRest.ServiceCallback<Models.OrderHistoryList>): void;
  getUserOrderHistory(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOrderHistoryOptionalParams | msRest.ServiceCallback<Models.OrderHistoryList>, callback?: msRest.ServiceCallback<Models.OrderHistoryList>): Promise<Models.GetUserOrderHistoryResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      getUserOrderHistoryOperationSpec,
      callback) as Promise<Models.GetUserOrderHistoryResponse>;
  }

  /**
   * In the response header, the "x-total-count" indicates the total number of orders placed by a
   * specified user for a specified base store.
   * @summary Get total number of orders.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  countUserOrders(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CountUserOrdersOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  countUserOrders(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  countUserOrders(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CountUserOrdersOptionalParams, callback: msRest.ServiceCallback<void>): void;
  countUserOrders(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CountUserOrdersOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        baseSiteId,
        userId,
        options
      },
      countUserOrdersOperationSpec,
      callback);
  }

  /**
   * Authorizes the cart and places the order. The response contains the new order data.
   * @summary Place a order.
   * @param cartId Cart code for logged in user, cart GUID for guest checkout
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.PlaceOrderResponse>
   */
  placeOrder(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2PlaceOrderOptionalParams): Promise<Models.PlaceOrderResponse>;
  /**
   * @param cartId Cart code for logged in user, cart GUID for guest checkout
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  placeOrder(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Order>): void;
  /**
   * @param cartId Cart code for logged in user, cart GUID for guest checkout
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  placeOrder(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2PlaceOrderOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;
  placeOrder(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2PlaceOrderOptionalParams | msRest.ServiceCallback<Models.Order>, callback?: msRest.ServiceCallback<Models.Order>): Promise<Models.PlaceOrderResponse> {
    return this.sendOperationRequest(
      {
        cartId,
        baseSiteId,
        userId,
        options
      },
      placeOrderOperationSpec,
      callback) as Promise<Models.PlaceOrderResponse>;
  }

  /**
   * Returns specific order details based on a specific order code. The response contains detailed
   * order information.
   * @summary Get a order.
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserOrdersResponse>
   */
  getUserOrders(code: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOrdersOptionalParams): Promise<Models.GetUserOrdersResponse>;
  /**
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getUserOrders(code: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Order>): void;
  /**
   * @param code Order GUID (Globally Unique Identifier) or order CODE
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserOrders(code: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserOrdersOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;
  getUserOrders(code: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOrdersOptionalParams | msRest.ServiceCallback<Models.Order>, callback?: msRest.ServiceCallback<Models.Order>): Promise<Models.GetUserOrdersResponse> {
    return this.sendOperationRequest(
      {
        code,
        baseSiteId,
        userId,
        options
      },
      getUserOrdersOperationSpec,
      callback) as Promise<Models.GetUserOrdersResponse>;
  }

  /**
   * Changes customer's password.
   * @summary Changes customer's password
   * @param newParameter New password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replaceUserPassword(newParameter: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ReplaceUserPasswordOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param newParameter New password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  replaceUserPassword(newParameter: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param newParameter New password.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserPassword(newParameter: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2ReplaceUserPasswordOptionalParams, callback: msRest.ServiceCallback<void>): void;
  replaceUserPassword(newParameter: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ReplaceUserPasswordOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        newParameter,
        baseSiteId,
        userId,
        options
      },
      replaceUserPasswordOperationSpec,
      callback);
  }

  /**
   * Return customer's credit card payment details list.
   * @summary Get customer's credit card payment details list.
   * @param saved Type of payment details.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentDetailsListResponse>
   */
  getPaymentDetailsList(saved: boolean, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsListOptionalParams): Promise<Models.GetPaymentDetailsListResponse>;
  /**
   * @param saved Type of payment details.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getPaymentDetailsList(saved: boolean, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.PaymentDetailsList>): void;
  /**
   * @param saved Type of payment details.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentDetailsList(saved: boolean, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentDetailsListOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetailsList>): void;
  getPaymentDetailsList(saved: boolean, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsListOptionalParams | msRest.ServiceCallback<Models.PaymentDetailsList>, callback?: msRest.ServiceCallback<Models.PaymentDetailsList>): Promise<Models.GetPaymentDetailsListResponse> {
    return this.sendOperationRequest(
      {
        saved,
        baseSiteId,
        userId,
        options
      },
      getPaymentDetailsListOperationSpec,
      callback) as Promise<Models.GetPaymentDetailsListResponse>;
  }

  /**
   * Returns a customer's credit card payment details for the specified paymentDetailsId.
   * @summary Get customer's credit card payment details.
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentDetailsResponse>
   */
  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams): Promise<Models.GetPaymentDetailsResponse>;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;
  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams | msRest.ServiceCallback<Models.PaymentDetails>, callback?: msRest.ServiceCallback<Models.PaymentDetails>): Promise<Models.GetPaymentDetailsResponse> {
    return this.sendOperationRequest(
      {
        paymentDetailsId,
        baseSiteId,
        userId,
        options
      },
      getPaymentDetailsOperationSpec,
      callback) as Promise<Models.GetPaymentDetailsResponse>;
  }

  /**
   * Updates existing customer's credit card payment info based on the payment info ID. Attributes
   * not given in request will be defined again (set to null or default).
   * @summary Updates existing customer's credit card payment info.
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  replacePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  replacePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  replacePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  replacePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        paymentDetailsId,
        paymentDetails,
        baseSiteId,
        userId,
        options
      },
      replacePaymentDetailsOperationSpec,
      callback);
  }

  /**
   * Deletes a customer's credit card payment details based on a specified paymentDetailsId.
   * @summary Deletes customer's credit card payment details.
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removePaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  removePaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  removePaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removePaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        paymentDetailsId,
        baseSiteId,
        userId,
        options
      },
      removePaymentDetailsOperationSpec,
      callback);
  }

  /**
   * Updates an existing customer's credit card payment details based on the specified
   * paymentDetailsId. Only those attributes provided in the request will be updated.
   * @summary Updates existing customer's credit card payment details.
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updatePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param callback The callback
   */
  updatePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param paymentDetailsId Payment details identifier.
   * @param paymentDetails Payment details object
   * @param baseSiteId Base site identifier
   * @param userId User identifier or one of the literals : 'current' for currently authenticated
   * user, 'anonymous' for anonymous user
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePaymentDetails(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        paymentDetailsId,
        paymentDetails,
        baseSiteId,
        userId,
        options
      },
      updatePaymentDetailsOperationSpec,
      callback);
  }

  /**
   * Returns details of a single voucher that is specified by its voucher identification code.
   * @summary Get a voucher based on code.
   * @param code Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoucherResponse>
   */
  getVoucher(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetVoucherOptionalParams): Promise<Models.GetVoucherResponse>;
  /**
   * @param code Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param callback The callback
   */
  getVoucher(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Voucher>): void;
  /**
   * @param code Voucher identifier (code)
   * @param baseSiteId Base site identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoucher(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetVoucherOptionalParams, callback: msRest.ServiceCallback<Models.Voucher>): void;
  getVoucher(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetVoucherOptionalParams | msRest.ServiceCallback<Models.Voucher>, callback?: msRest.ServiceCallback<Models.Voucher>): Promise<Models.GetVoucherResponse> {
    return this.sendOperationRequest(
      {
        code,
        baseSiteId,
        options
      },
      getVoucherOperationSpec,
      callback) as Promise<Models.GetVoucherResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBaseStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/basestores/{baseStoreUid}",
  urlParameters: [
    Parameters.baseStoreUid,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BaseStore
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCardTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/cardtypes",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CardTypeList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCatalogsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/catalogs",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CatalogList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCatalogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/catalogs/{catalogId}",
  urlParameters: [
    Parameters.catalogId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCatalogVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}",
  urlParameters: [
    Parameters.catalogId,
    Parameters.catalogVersionId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CatalogVersion
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCategoriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}",
  urlParameters: [
    Parameters.catalogId,
    Parameters.catalogVersionId,
    Parameters.categoryId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CategoryHierarchy
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getComponentByIdListUsingPOSTOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/cms/components",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.catalogCode,
    Parameters.productCode0,
    Parameters.categoryCode,
    Parameters.fields0,
    Parameters.currentPage,
    Parameters.pageSize0,
    Parameters.sort0
  ],
  requestBody: {
    parameterPath: "componentIdList",
    mapper: {
      ...Mappers.ComponentIDList,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ListAdaptedComponents
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getComponentByIdUsingGETOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/cms/components/{componentId}",
  urlParameters: [
    Parameters.componentId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.catalogCode,
    Parameters.productCode0,
    Parameters.categoryCode,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getPageDataUsingGETOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/cms/pages",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.pageType,
    Parameters.pageLabelOrId,
    Parameters.code0,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CMSPage
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCountriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/countries",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.type0,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CountryList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCountryRegionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/countries/{countyIsoCode}/regions",
  urlParameters: [
    Parameters.countyIsoCode,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegionList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCurrenciesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/currencies",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CurrencyList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCustomerGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/customergroups",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.fields1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserGroupList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createCustomerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/customergroups",
  urlParameters: [
    Parameters.baseSiteId
  ],
  requestBody: {
    parameterPath: "userGroup",
    mapper: {
      ...Mappers.UserGroup,
      required: true
    }
  },
  responses: {
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCustomerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/customergroups/{groupId}",
  urlParameters: [
    Parameters.groupId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserGroup
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceUsersForCustomerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
  urlParameters: [
    Parameters.groupId,
    Parameters.baseSiteId
  ],
  requestBody: {
    parameterPath: "members",
    mapper: {
      ...Mappers.MemberList,
      required: true
    }
  },
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateCustomerGroupWithUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
  urlParameters: [
    Parameters.groupId,
    Parameters.baseSiteId
  ],
  requestBody: {
    parameterPath: "members",
    mapper: {
      ...Mappers.MemberList,
      required: true
    }
  },
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const removeUsersFromCustomerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members/{userId}",
  urlParameters: [
    Parameters.groupId,
    Parameters.userId,
    Parameters.baseSiteId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getDeliveryCountriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/deliverycountries",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CountryList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getExportedProductsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/export/products",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.catalog,
    Parameters.version,
    Parameters.timestamp0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getOrderStatusFeedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/feeds/orders/statusfeed",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.timestamp1,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrderStatusUpdateElementList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doRestorePasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/forgottenpasswordtokens",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.userId
  ],
  responses: {
    201: {},
    202: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doHandleMerchantCallbackOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/integration/merchant_callback",
  urlParameters: [
    Parameters.baseSiteId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doHandleCartMerchantCallbackOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response",
  urlParameters: [
    Parameters.userId,
    Parameters.cartId,
    Parameters.baseSiteId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getLanguagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/languages",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LanguageList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/orders/{code}",
  urlParameters: [
    Parameters.code1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Order
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getExpressUpdateProductsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/expressupdate",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.timestamp1,
    Parameters.catalog,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductExpressUpdateElementList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getProductsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/search",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.query,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.sort0,
    Parameters.fields0,
    Parameters.searchQueryContext
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductSearchPage
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const countProductsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "rest/v2/{baseSiteId}/products/search",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.query
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSuggestionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/suggestions",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.term,
    Parameters.max,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SuggestionList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/{productCode}",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getProductReferencesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/{productCode}/references",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.pageSize2,
    Parameters.referenceType,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductReferenceList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getProductReviewsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.maxCount,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReviewList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createProductReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "review",
    mapper: {
      ...Mappers.Review,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Review
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getLocationProductStockOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.location,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StoreFinderStockSearchPage
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const countProductStockByLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
  urlParameters: [
    Parameters.productCode1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.location,
    Parameters.latitude,
    Parameters.longitude
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getStoreProductStockOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/products/{productCode}/stock/{storeName}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.productCode1,
    Parameters.storeName
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Stock
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getPromotionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/promotions",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.type1,
    Parameters.promotionGroup,
    Parameters.fields1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PromotionList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getPromotionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/promotions/{code}",
  urlParameters: [
    Parameters.code1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Promotion
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getStoreLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/stores",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.query,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.sort1,
    Parameters.radius,
    Parameters.accuracy,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StoreFinderSearchPage
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const countStoreLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "rest/v2/{baseSiteId}/stores",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.query,
    Parameters.latitude,
    Parameters.longitude,
    Parameters.radius,
    Parameters.accuracy
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getStoreLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/stores/{storeId}",
  urlParameters: [
    Parameters.storeId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PointOfService
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getTitlesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/titles",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TitleList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users",
  urlParameters: [
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "user",
    mapper: {
      ...Mappers.UserSignUp,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.User
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "user",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const updateUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "user",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getAddressesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AddressList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.Address,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Address
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const validateAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses/verification",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.Address,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AddressValidation
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Address
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.Address,
      required: true
    }
  },
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const updateAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
  urlParameters: [
    Parameters.addressId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.Address,
      required: true
    }
  },
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getCartsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0,
    Parameters.savedCartsOnly,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.sort0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CartList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.oldCartId,
    Parameters.toMergeCartGuid,
    Parameters.fields0
  ],
  responses: {
    201: {
      bodyMapper: Mappers.Cart
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Cart
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const createCartDeliveryAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "address",
    mapper: {
      ...Mappers.Address,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Address
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceCartDeliveryAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.addressId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartDeliveryAddressOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const doCartCloneOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart",
  urlParameters: [
    Parameters.cartId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.name,
    Parameters.description,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SaveCartResult
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getConsolidatedPickupLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PointOfServiceList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createConsolidatedPickupLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.storeName,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CartModificationList
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartDeliveryModeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeliveryMode
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceCartDeliveryModeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.deliveryModeId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartDeliveryModeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getCartDeliveryModesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeliveryModeList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceCartGuestUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/email",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.email
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrderEntryList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createCartEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
  urlParameters: [
    Parameters.userId,
    Parameters.cartId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "entry",
    mapper: {
      ...Mappers.OrderEntry,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CartModification
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
  urlParameters: [
    Parameters.entryNumber,
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrderEntry
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceCartEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
  urlParameters: [
    Parameters.entryNumber,
    Parameters.userId,
    Parameters.cartId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "entry",
    mapper: {
      ...Mappers.OrderEntry,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CartModification
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
  urlParameters: [
    Parameters.entryNumber,
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const updateCartEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
  urlParameters: [
    Parameters.entryNumber,
    Parameters.userId,
    Parameters.cartId,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "entry",
    mapper: {
      ...Mappers.OrderEntry,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CartModification
    },
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const doUpdateFlagForDeletionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion",
  urlParameters: [
    Parameters.cartId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SaveCartResult
    },
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSopPaymentRequestDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.responseUrl,
    Parameters.extendedMerchantCallback,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentRequest
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSopPaymentResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentDetails
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doHandleSopPaymentResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields2
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentDetails
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeSopPaymentResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const createCartPaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  requestBody: {
    parameterPath: "paymentDetails",
    mapper: {
      ...Mappers.PaymentDetails,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PaymentDetails
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceCartPaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.paymentDetailsId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartPromotionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PromotionResultList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doApplyCartPromotionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.promotionId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartPromotionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
  urlParameters: [
    Parameters.promotionId,
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PromotionResultList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartPromotionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
  urlParameters: [
    Parameters.promotionId,
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const doUpdateSavedCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart",
  urlParameters: [
    Parameters.cartId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SaveCartResult
    },
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const doSaveCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/save",
  urlParameters: [
    Parameters.cartId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.saveCartName,
    Parameters.saveCartDescription,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SaveCartResult
    },
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSavedCartOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart",
  urlParameters: [
    Parameters.cartId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SaveCartResult
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getCartVouchersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VoucherList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const doApplyCartVoucherOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  queryParameters: [
    Parameters.voucherId
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeCartVoucherOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}",
  urlParameters: [
    Parameters.voucherId,
    Parameters.baseSiteId,
    Parameters.userId,
    Parameters.cartId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const doGiveConsentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/consents",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.consentTemplateId,
    Parameters.consentTemplateVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConsentTemplate
    },
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removeConsentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/consents/{consentCode}",
  urlParameters: [
    Parameters.consentCode,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getConsentTemplatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConsentTemplateList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getConsentTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}",
  urlParameters: [
    Parameters.consentTemplateId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConsentTemplate
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getUserCustomerGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/customergroups",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserGroupList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceUserLoginOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/login",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.newLogin,
    Parameters.password
  ],
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getUserOrderHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/orders",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.statuses,
    Parameters.currentPage,
    Parameters.pageSize1,
    Parameters.sort0,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrderHistoryList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const countUserOrdersOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "rest/v2/{baseSiteId}/users/{userId}/orders",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.statuses
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const placeOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "rest/v2/{baseSiteId}/users/{userId}/orders",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.cartId,
    Parameters.securityCode,
    Parameters.fields0
  ],
  responses: {
    201: {
      bodyMapper: Mappers.Order
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getUserOrdersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/orders/{code}",
  urlParameters: [
    Parameters.code1,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Order
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replaceUserPasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/password",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.old,
    Parameters.newParameter
  ],
  responses: {
    201: {},
    202: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getPaymentDetailsListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails",
  urlParameters: [
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.saved,
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentDetailsList
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getPaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
  urlParameters: [
    Parameters.paymentDetailsId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  queryParameters: [
    Parameters.fields0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentDetails
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const replacePaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
  urlParameters: [
    Parameters.paymentDetailsId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "paymentDetails",
    mapper: {
      ...Mappers.PaymentDetails,
      required: true
    }
  },
  responses: {
    200: {},
    201: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const removePaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
  urlParameters: [
    Parameters.paymentDetailsId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const updatePaymentDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
  urlParameters: [
    Parameters.paymentDetailsId,
    Parameters.baseSiteId,
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "paymentDetails",
    mapper: {
      ...Mappers.PaymentDetails,
      required: true
    }
  },
  responses: {
    200: {},
    204: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getVoucherOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rest/v2/{baseSiteId}/vouchers/{code}",
  urlParameters: [
    Parameters.code1,
    Parameters.baseSiteId
  ],
  queryParameters: [
    Parameters.fields1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Voucher
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

export {
  CommerceWebservicesV2,
  CommerceWebservicesV2Context,
  Models as CommerceWebservicesV2Models,
  Mappers as CommerceWebservicesV2Mappers
};
