/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CommerceWebservicesV2Context } from "./commerceWebservicesV2Context";
var CommerceWebservicesV2 = /** @class */ (function (_super) {
    tslib_1.__extends(CommerceWebservicesV2, _super);
    /**
     * Initializes a new instance of the CommerceWebservicesV2 class.
     * @param [options] The parameter options
     */
    function CommerceWebservicesV2(options) {
        return _super.call(this, options) || this;
    }
    CommerceWebservicesV2.prototype.getBaseStore = function (baseStoreUid, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseStoreUid: baseStoreUid,
            baseSiteId: baseSiteId,
            options: options
        }, getBaseStoreOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCardTypes = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getCardTypesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCatalogs = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getCatalogsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCatalog = function (catalogId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            catalogId: catalogId,
            baseSiteId: baseSiteId,
            options: options
        }, getCatalogOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCatalogVersion = function (catalogId, catalogVersionId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            catalogId: catalogId,
            catalogVersionId: catalogVersionId,
            baseSiteId: baseSiteId,
            options: options
        }, getCatalogVersionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCategories = function (catalogId, catalogVersionId, categoryId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            catalogId: catalogId,
            catalogVersionId: catalogVersionId,
            categoryId: categoryId,
            baseSiteId: baseSiteId,
            options: options
        }, getCategoriesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getComponentByIdListUsingPOST = function (componentIdList, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            componentIdList: componentIdList,
            baseSiteId: baseSiteId,
            options: options
        }, getComponentByIdListUsingPOSTOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getComponentByIdUsingGET = function (componentId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            componentId: componentId,
            baseSiteId: baseSiteId,
            options: options
        }, getComponentByIdUsingGETOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getPageDataUsingGET = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getPageDataUsingGETOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCountries = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getCountriesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCountryRegions = function (countyIsoCode, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            countyIsoCode: countyIsoCode,
            baseSiteId: baseSiteId,
            options: options
        }, getCountryRegionsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCurrencies = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getCurrenciesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCustomerGroups = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getCustomerGroupsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createCustomerGroup = function (userGroup, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            userGroup: userGroup,
            baseSiteId: baseSiteId,
            options: options
        }, createCustomerGroupOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCustomerGroup = function (groupId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            groupId: groupId,
            baseSiteId: baseSiteId,
            options: options
        }, getCustomerGroupOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceUsersForCustomerGroup = function (groupId, members, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            groupId: groupId,
            members: members,
            baseSiteId: baseSiteId,
            options: options
        }, replaceUsersForCustomerGroupOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.updateCustomerGroupWithUsers = function (groupId, members, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            groupId: groupId,
            members: members,
            baseSiteId: baseSiteId,
            options: options
        }, updateCustomerGroupWithUsersOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeUsersFromCustomerGroup = function (groupId, userId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            groupId: groupId,
            userId: userId,
            baseSiteId: baseSiteId,
            options: options
        }, removeUsersFromCustomerGroupOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getDeliveryCountries = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getDeliveryCountriesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getExportedProducts = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getExportedProductsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getOrderStatusFeed = function (timestamp, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            timestamp: timestamp,
            baseSiteId: baseSiteId,
            options: options
        }, getOrderStatusFeedOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doRestorePassword = function (userId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            userId: userId,
            baseSiteId: baseSiteId,
            options: options
        }, doRestorePasswordOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doHandleMerchantCallback = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, doHandleMerchantCallbackOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doHandleCartMerchantCallback = function (userId, cartId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            userId: userId,
            cartId: cartId,
            baseSiteId: baseSiteId,
            options: options
        }, doHandleCartMerchantCallbackOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getLanguages = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getLanguagesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getOrder = function (code, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            code: code,
            baseSiteId: baseSiteId,
            options: options
        }, getOrderOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getExpressUpdateProducts = function (timestamp, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            timestamp: timestamp,
            baseSiteId: baseSiteId,
            options: options
        }, getExpressUpdateProductsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getProducts = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getProductsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.countProducts = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, countProductsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getSuggestions = function (term, max, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            term: term,
            max: max,
            baseSiteId: baseSiteId,
            options: options
        }, getSuggestionsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getProduct = function (productCode, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            baseSiteId: baseSiteId,
            options: options
        }, getProductOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getProductReferences = function (productCode, referenceType, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            referenceType: referenceType,
            baseSiteId: baseSiteId,
            options: options
        }, getProductReferencesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getProductReviews = function (productCode, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            baseSiteId: baseSiteId,
            options: options
        }, getProductReviewsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createProductReview = function (productCode, review, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            review: review,
            baseSiteId: baseSiteId,
            options: options
        }, createProductReviewOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getLocationProductStock = function (productCode, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            baseSiteId: baseSiteId,
            options: options
        }, getLocationProductStockOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.countProductStockByLocation = function (productCode, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            productCode: productCode,
            baseSiteId: baseSiteId,
            options: options
        }, countProductStockByLocationOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getStoreProductStock = function (baseSiteId, productCode, storeName, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            productCode: productCode,
            storeName: storeName,
            options: options
        }, getStoreProductStockOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getPromotions = function (type, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            type: type,
            baseSiteId: baseSiteId,
            options: options
        }, getPromotionsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getPromotion = function (code, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            code: code,
            baseSiteId: baseSiteId,
            options: options
        }, getPromotionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getStoreLocations = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getStoreLocationsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.countStoreLocations = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, countStoreLocationsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getStoreLocation = function (storeId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            storeId: storeId,
            baseSiteId: baseSiteId,
            options: options
        }, getStoreLocationOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getTitles = function (baseSiteId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            options: options
        }, getTitlesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createUser = function (user, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            user: user,
            baseSiteId: baseSiteId,
            options: options
        }, createUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getUser = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceUser = function (user, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            user: user,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, replaceUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeUser = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, removeUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.updateUser = function (user, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            user: user,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, updateUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getAddresses = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getAddressesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createAddress = function (address, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            address: address,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, createAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.validateAddress = function (address, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            address: address,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, validateAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getAddress = function (addressId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            addressId: addressId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceAddress = function (addressId, address, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            addressId: addressId,
            address: address,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, replaceAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeAddress = function (addressId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            addressId: addressId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, removeAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.updateAddress = function (addressId, address, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            addressId: addressId,
            address: address,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, updateAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCarts = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getCartsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createCart = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, createCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCart = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCart = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createCartDeliveryAddress = function (address, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            address: address,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, createCartDeliveryAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceCartDeliveryAddress = function (addressId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            addressId: addressId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, replaceCartDeliveryAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCartDeliveryAddress = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartDeliveryAddressOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doCartClone = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, doCartCloneOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getConsolidatedPickupLocations = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getConsolidatedPickupLocationsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createConsolidatedPickupLocation = function (storeName, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            storeName: storeName,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, createConsolidatedPickupLocationOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartDeliveryMode = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartDeliveryModeOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceCartDeliveryMode = function (deliveryModeId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            deliveryModeId: deliveryModeId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, replaceCartDeliveryModeOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCartDeliveryMode = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartDeliveryModeOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartDeliveryModes = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartDeliveryModesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceCartGuestUser = function (email, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            email: email,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, replaceCartGuestUserOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartEntries = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartEntriesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createCartEntry = function (entry, userId, cartId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            entry: entry,
            userId: userId,
            cartId: cartId,
            baseSiteId: baseSiteId,
            options: options
        }, createCartEntryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartEntry = function (entryNumber, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            entryNumber: entryNumber,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartEntryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceCartEntry = function (entryNumber, entry, userId, cartId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            entryNumber: entryNumber,
            entry: entry,
            userId: userId,
            cartId: cartId,
            baseSiteId: baseSiteId,
            options: options
        }, replaceCartEntryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCartEntry = function (entryNumber, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            entryNumber: entryNumber,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartEntryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.updateCartEntry = function (entryNumber, entry, userId, cartId, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            entryNumber: entryNumber,
            entry: entry,
            userId: userId,
            cartId: cartId,
            baseSiteId: baseSiteId,
            options: options
        }, updateCartEntryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doUpdateFlagForDeletion = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, doUpdateFlagForDeletionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getSopPaymentRequestDetails = function (responseUrl, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            responseUrl: responseUrl,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getSopPaymentRequestDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getSopPaymentResponse = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getSopPaymentResponseOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doHandleSopPaymentResponse = function (fields, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            fields: fields,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, doHandleSopPaymentResponseOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeSopPaymentResponse = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeSopPaymentResponseOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.createCartPaymentDetails = function (paymentDetails, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            paymentDetails: paymentDetails,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, createCartPaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceCartPaymentDetails = function (paymentDetailsId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            paymentDetailsId: paymentDetailsId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, replaceCartPaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartPromotions = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartPromotionsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doApplyCartPromotion = function (promotionId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            promotionId: promotionId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, doApplyCartPromotionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartPromotion = function (promotionId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            promotionId: promotionId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartPromotionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCartPromotion = function (promotionId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            promotionId: promotionId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartPromotionOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doUpdateSavedCart = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, doUpdateSavedCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doSaveCart = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, doSaveCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getSavedCart = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getSavedCartOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getCartVouchers = function (baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, getCartVouchersOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doApplyCartVoucher = function (voucherId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            voucherId: voucherId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, doApplyCartVoucherOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeCartVoucher = function (voucherId, baseSiteId, userId, cartId, options, callback) {
        return this.sendOperationRequest({
            voucherId: voucherId,
            baseSiteId: baseSiteId,
            userId: userId,
            cartId: cartId,
            options: options
        }, removeCartVoucherOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.doGiveConsent = function (consentTemplateId, consentTemplateVersion, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            consentTemplateId: consentTemplateId,
            consentTemplateVersion: consentTemplateVersion,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, doGiveConsentOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removeConsent = function (consentCode, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            consentCode: consentCode,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, removeConsentOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getConsentTemplates = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getConsentTemplatesOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getConsentTemplate = function (consentTemplateId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            consentTemplateId: consentTemplateId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getConsentTemplateOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getUserCustomerGroups = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getUserCustomerGroupsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceUserLogin = function (newLogin, password, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            newLogin: newLogin,
            password: password,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, replaceUserLoginOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getUserOrderHistory = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getUserOrderHistoryOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.countUserOrders = function (baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, countUserOrdersOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.placeOrder = function (cartId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            cartId: cartId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, placeOrderOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getUserOrders = function (code, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            code: code,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getUserOrdersOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replaceUserPassword = function (newParameter, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            newParameter: newParameter,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, replaceUserPasswordOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getPaymentDetailsList = function (saved, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            saved: saved,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getPaymentDetailsListOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getPaymentDetails = function (paymentDetailsId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            paymentDetailsId: paymentDetailsId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, getPaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.replacePaymentDetails = function (paymentDetailsId, paymentDetails, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            paymentDetailsId: paymentDetailsId,
            paymentDetails: paymentDetails,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, replacePaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.removePaymentDetails = function (paymentDetailsId, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            paymentDetailsId: paymentDetailsId,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, removePaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.updatePaymentDetails = function (paymentDetailsId, paymentDetails, baseSiteId, userId, options, callback) {
        return this.sendOperationRequest({
            paymentDetailsId: paymentDetailsId,
            paymentDetails: paymentDetails,
            baseSiteId: baseSiteId,
            userId: userId,
            options: options
        }, updatePaymentDetailsOperationSpec, callback);
    };
    CommerceWebservicesV2.prototype.getVoucher = function (code, baseSiteId, options, callback) {
        return this.sendOperationRequest({
            code: code,
            baseSiteId: baseSiteId,
            options: options
        }, getVoucherOperationSpec, callback);
    };
    return CommerceWebservicesV2;
}(CommerceWebservicesV2Context));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getBaseStoreOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/basestores/{baseStoreUid}",
    urlParameters: [
        Parameters.baseStoreUid,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BaseStore
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCardTypesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/cardtypes",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CardTypeList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCatalogsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/catalogs",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CatalogList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCatalogOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/catalogs/{catalogId}",
    urlParameters: [
        Parameters.catalogId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Catalog
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCatalogVersionOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}",
    urlParameters: [
        Parameters.catalogId,
        Parameters.catalogVersionId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CatalogVersion
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCategoriesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}",
    urlParameters: [
        Parameters.catalogId,
        Parameters.catalogVersionId,
        Parameters.categoryId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CategoryHierarchy
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getComponentByIdListUsingPOSTOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/cms/components",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.catalogCode,
        Parameters.productCode0,
        Parameters.categoryCode,
        Parameters.fields0,
        Parameters.currentPage,
        Parameters.pageSize0,
        Parameters.sort0
    ],
    requestBody: {
        parameterPath: "componentIdList",
        mapper: tslib_1.__assign({}, Mappers.ComponentIDList, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ListAdaptedComponents
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getComponentByIdUsingGETOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/cms/components/{componentId}",
    urlParameters: [
        Parameters.componentId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.catalogCode,
        Parameters.productCode0,
        Parameters.categoryCode,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getPageDataUsingGETOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/cms/pages",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.pageType,
        Parameters.pageLabelOrId,
        Parameters.code0,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CMSPage
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCountriesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/countries",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.type0,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CountryList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCountryRegionsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/countries/{countyIsoCode}/regions",
    urlParameters: [
        Parameters.countyIsoCode,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegionList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCurrenciesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/currencies",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CurrencyList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCustomerGroupsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/customergroups",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.fields1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserGroupList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createCustomerGroupOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/customergroups",
    urlParameters: [
        Parameters.baseSiteId
    ],
    requestBody: {
        parameterPath: "userGroup",
        mapper: tslib_1.__assign({}, Mappers.UserGroup, { required: true })
    },
    responses: {
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCustomerGroupOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/customergroups/{groupId}",
    urlParameters: [
        Parameters.groupId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserGroup
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceUsersForCustomerGroupOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
    urlParameters: [
        Parameters.groupId,
        Parameters.baseSiteId
    ],
    requestBody: {
        parameterPath: "members",
        mapper: tslib_1.__assign({}, Mappers.MemberList, { required: true })
    },
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateCustomerGroupWithUsersOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
    urlParameters: [
        Parameters.groupId,
        Parameters.baseSiteId
    ],
    requestBody: {
        parameterPath: "members",
        mapper: tslib_1.__assign({}, Mappers.MemberList, { required: true })
    },
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var removeUsersFromCustomerGroupOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members/{userId}",
    urlParameters: [
        Parameters.groupId,
        Parameters.userId,
        Parameters.baseSiteId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getDeliveryCountriesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/deliverycountries",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CountryList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getExportedProductsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/export/products",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.catalog,
        Parameters.version,
        Parameters.timestamp0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProductList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getOrderStatusFeedOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/feeds/orders/statusfeed",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.timestamp1,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OrderStatusUpdateElementList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doRestorePasswordOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/forgottenpasswordtokens",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.userId
    ],
    responses: {
        201: {},
        202: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doHandleMerchantCallbackOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/integration/merchant_callback",
    urlParameters: [
        Parameters.baseSiteId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doHandleCartMerchantCallbackOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response",
    urlParameters: [
        Parameters.userId,
        Parameters.cartId,
        Parameters.baseSiteId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getLanguagesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/languages",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LanguageList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getOrderOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/orders/{code}",
    urlParameters: [
        Parameters.code1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Order
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getExpressUpdateProductsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/expressupdate",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.timestamp1,
        Parameters.catalog,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProductExpressUpdateElementList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getProductsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/search",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.query,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.sort0,
        Parameters.fields0,
        Parameters.searchQueryContext
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProductSearchPage
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var countProductsOperationSpec = {
    httpMethod: "HEAD",
    path: "rest/v2/{baseSiteId}/products/search",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.query
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getSuggestionsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/suggestions",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.term,
        Parameters.max,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SuggestionList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getProductOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/{productCode}",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Product
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getProductReferencesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/{productCode}/references",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.pageSize2,
        Parameters.referenceType,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProductReferenceList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getProductReviewsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.maxCount,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ReviewList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createProductReviewOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "review",
        mapper: tslib_1.__assign({}, Mappers.Review, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Review
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getLocationProductStockOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.location,
        Parameters.latitude,
        Parameters.longitude,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StoreFinderStockSearchPage
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var countProductStockByLocationOperationSpec = {
    httpMethod: "HEAD",
    path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
    urlParameters: [
        Parameters.productCode1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.location,
        Parameters.latitude,
        Parameters.longitude
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getStoreProductStockOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/products/{productCode}/stock/{storeName}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.productCode1,
        Parameters.storeName
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Stock
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getPromotionsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/promotions",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.type1,
        Parameters.promotionGroup,
        Parameters.fields1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PromotionList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getPromotionOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/promotions/{code}",
    urlParameters: [
        Parameters.code1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Promotion
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getStoreLocationsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/stores",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.query,
        Parameters.latitude,
        Parameters.longitude,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.sort1,
        Parameters.radius,
        Parameters.accuracy,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StoreFinderSearchPage
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var countStoreLocationsOperationSpec = {
    httpMethod: "HEAD",
    path: "rest/v2/{baseSiteId}/stores",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.query,
        Parameters.latitude,
        Parameters.longitude,
        Parameters.radius,
        Parameters.accuracy
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getStoreLocationOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/stores/{storeId}",
    urlParameters: [
        Parameters.storeId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PointOfService
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getTitlesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/titles",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TitleList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createUserOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users",
    urlParameters: [
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "user",
        mapper: tslib_1.__assign({}, Mappers.UserSignUp, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.User
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getUserOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceUserOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "user",
        mapper: tslib_1.__assign({}, Mappers.User, { required: true })
    },
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeUserOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateUserOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "user",
        mapper: tslib_1.__assign({}, Mappers.User, { required: true })
    },
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getAddressesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AddressList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createAddressOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "address",
        mapper: tslib_1.__assign({}, Mappers.Address, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Address
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var validateAddressOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses/verification",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "address",
        mapper: tslib_1.__assign({}, Mappers.Address, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AddressValidation
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getAddressOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
    urlParameters: [
        Parameters.addressId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Address
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceAddressOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
    urlParameters: [
        Parameters.addressId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "address",
        mapper: tslib_1.__assign({}, Mappers.Address, { required: true })
    },
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeAddressOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
    urlParameters: [
        Parameters.addressId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateAddressOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
    urlParameters: [
        Parameters.addressId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "address",
        mapper: tslib_1.__assign({}, Mappers.Address, { required: true })
    },
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getCartsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0,
        Parameters.savedCartsOnly,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.sort0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CartList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createCartOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.oldCartId,
        Parameters.toMergeCartGuid,
        Parameters.fields0
    ],
    responses: {
        201: {
            bodyMapper: Mappers.Cart
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Cart
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var createCartDeliveryAddressOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "address",
        mapper: tslib_1.__assign({}, Mappers.Address, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Address
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceCartDeliveryAddressOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.addressId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartDeliveryAddressOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var doCartCloneOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart",
    urlParameters: [
        Parameters.cartId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.name,
        Parameters.description,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SaveCartResult
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getConsolidatedPickupLocationsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PointOfServiceList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createConsolidatedPickupLocationOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.storeName,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CartModificationList
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartDeliveryModeOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeliveryMode
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceCartDeliveryModeOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.deliveryModeId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartDeliveryModeOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getCartDeliveryModesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeliveryModeList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceCartGuestUserOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/email",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.email
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartEntriesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OrderEntryList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createCartEntryOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
    urlParameters: [
        Parameters.userId,
        Parameters.cartId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "entry",
        mapper: tslib_1.__assign({}, Mappers.OrderEntry, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CartModification
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartEntryOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
    urlParameters: [
        Parameters.entryNumber,
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OrderEntry
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceCartEntryOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
    urlParameters: [
        Parameters.entryNumber,
        Parameters.userId,
        Parameters.cartId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "entry",
        mapper: tslib_1.__assign({}, Mappers.OrderEntry, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CartModification
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartEntryOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
    urlParameters: [
        Parameters.entryNumber,
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateCartEntryOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
    urlParameters: [
        Parameters.entryNumber,
        Parameters.userId,
        Parameters.cartId,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "entry",
        mapper: tslib_1.__assign({}, Mappers.OrderEntry, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CartModification
        },
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var doUpdateFlagForDeletionOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion",
    urlParameters: [
        Parameters.cartId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SaveCartResult
        },
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getSopPaymentRequestDetailsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.responseUrl,
        Parameters.extendedMerchantCallback,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaymentRequest
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getSopPaymentResponseOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaymentDetails
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doHandleSopPaymentResponseOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields2
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaymentDetails
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeSopPaymentResponseOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var createCartPaymentDetailsOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    requestBody: {
        parameterPath: "paymentDetails",
        mapper: tslib_1.__assign({}, Mappers.PaymentDetails, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.PaymentDetails
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceCartPaymentDetailsOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.paymentDetailsId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartPromotionsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PromotionResultList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doApplyCartPromotionOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.promotionId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartPromotionOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
    urlParameters: [
        Parameters.promotionId,
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PromotionResultList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartPromotionOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
    urlParameters: [
        Parameters.promotionId,
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var doUpdateSavedCartOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart",
    urlParameters: [
        Parameters.cartId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SaveCartResult
        },
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var doSaveCartOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/save",
    urlParameters: [
        Parameters.cartId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.saveCartName,
        Parameters.saveCartDescription,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SaveCartResult
        },
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getSavedCartOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart",
    urlParameters: [
        Parameters.cartId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SaveCartResult
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getCartVouchersOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VoucherList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var doApplyCartVoucherOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    queryParameters: [
        Parameters.voucherId
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeCartVoucherOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}",
    urlParameters: [
        Parameters.voucherId,
        Parameters.baseSiteId,
        Parameters.userId,
        Parameters.cartId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var doGiveConsentOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/consents",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.consentTemplateId,
        Parameters.consentTemplateVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConsentTemplate
        },
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removeConsentOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/consents/{consentCode}",
    urlParameters: [
        Parameters.consentCode,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getConsentTemplatesOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConsentTemplateList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getConsentTemplateOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}",
    urlParameters: [
        Parameters.consentTemplateId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConsentTemplate
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getUserCustomerGroupsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/customergroups",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserGroupList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceUserLoginOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/login",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.newLogin,
        Parameters.password
    ],
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getUserOrderHistoryOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/orders",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.statuses,
        Parameters.currentPage,
        Parameters.pageSize1,
        Parameters.sort0,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OrderHistoryList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var countUserOrdersOperationSpec = {
    httpMethod: "HEAD",
    path: "rest/v2/{baseSiteId}/users/{userId}/orders",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.statuses
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var placeOrderOperationSpec = {
    httpMethod: "POST",
    path: "rest/v2/{baseSiteId}/users/{userId}/orders",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.cartId,
        Parameters.securityCode,
        Parameters.fields0
    ],
    responses: {
        201: {
            bodyMapper: Mappers.Order
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getUserOrdersOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/orders/{code}",
    urlParameters: [
        Parameters.code1,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Order
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replaceUserPasswordOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/password",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.old,
        Parameters.newParameter
    ],
    responses: {
        201: {},
        202: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getPaymentDetailsListOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails",
    urlParameters: [
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.saved,
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaymentDetailsList
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getPaymentDetailsOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
    urlParameters: [
        Parameters.paymentDetailsId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    queryParameters: [
        Parameters.fields0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaymentDetails
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var replacePaymentDetailsOperationSpec = {
    httpMethod: "PUT",
    path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
    urlParameters: [
        Parameters.paymentDetailsId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "paymentDetails",
        mapper: tslib_1.__assign({}, Mappers.PaymentDetails, { required: true })
    },
    responses: {
        200: {},
        201: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var removePaymentDetailsOperationSpec = {
    httpMethod: "DELETE",
    path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
    urlParameters: [
        Parameters.paymentDetailsId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updatePaymentDetailsOperationSpec = {
    httpMethod: "PATCH",
    path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
    urlParameters: [
        Parameters.paymentDetailsId,
        Parameters.baseSiteId,
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "paymentDetails",
        mapper: tslib_1.__assign({}, Mappers.PaymentDetails, { required: true })
    },
    responses: {
        200: {},
        204: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getVoucherOperationSpec = {
    httpMethod: "GET",
    path: "rest/v2/{baseSiteId}/vouchers/{code}",
    urlParameters: [
        Parameters.code1,
        Parameters.baseSiteId
    ],
    queryParameters: [
        Parameters.fields1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Voucher
        },
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
export { CommerceWebservicesV2, CommerceWebservicesV2Context, Models as CommerceWebservicesV2Models, Mappers as CommerceWebservicesV2Mappers };
//# sourceMappingURL=commerceWebservicesV2.js.map