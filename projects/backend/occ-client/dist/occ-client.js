/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (factory((global.OccClient = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var Country = {
        serializedName: "Country",
        type: {
            name: "Composite",
            className: "Country",
            modelProperties: {
                isocode: {
                    serializedName: "isocode",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Region = {
        serializedName: "Region",
        type: {
            name: "Composite",
            className: "Region",
            modelProperties: {
                countryIso: {
                    serializedName: "countryIso",
                    type: {
                        name: "String"
                    }
                },
                isocode: {
                    serializedName: "isocode",
                    type: {
                        name: "String"
                    }
                },
                isocodeShort: {
                    serializedName: "isocodeShort",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Address = {
        serializedName: "Address",
        type: {
            name: "Composite",
            className: "Address",
            modelProperties: {
                companyName: {
                    serializedName: "companyName",
                    type: {
                        name: "String"
                    }
                },
                country: {
                    serializedName: "country",
                    type: {
                        name: "Composite",
                        className: "Country"
                    }
                },
                defaultAddress: {
                    serializedName: "defaultAddress",
                    type: {
                        name: "Boolean"
                    }
                },
                email: {
                    serializedName: "email",
                    type: {
                        name: "String"
                    }
                },
                firstName: {
                    serializedName: "firstName",
                    type: {
                        name: "String"
                    }
                },
                formattedAddress: {
                    serializedName: "formattedAddress",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lastName: {
                    serializedName: "lastName",
                    type: {
                        name: "String"
                    }
                },
                line1: {
                    serializedName: "line1",
                    type: {
                        name: "String"
                    }
                },
                line2: {
                    serializedName: "line2",
                    type: {
                        name: "String"
                    }
                },
                phone: {
                    serializedName: "phone",
                    type: {
                        name: "String"
                    }
                },
                postalCode: {
                    serializedName: "postalCode",
                    type: {
                        name: "String"
                    }
                },
                region: {
                    serializedName: "region",
                    type: {
                        name: "Composite",
                        className: "Region"
                    }
                },
                shippingAddress: {
                    serializedName: "shippingAddress",
                    type: {
                        name: "Boolean"
                    }
                },
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                titleCode: {
                    serializedName: "titleCode",
                    type: {
                        name: "String"
                    }
                },
                town: {
                    serializedName: "town",
                    type: {
                        name: "String"
                    }
                },
                visibleInAddressBook: {
                    serializedName: "visibleInAddressBook",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AddressList = {
        serializedName: "AddressList",
        type: {
            name: "Composite",
            className: "AddressList",
            modelProperties: {
                addresses: {
                    serializedName: "addresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Address"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                subject: {
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                subjectType: {
                    serializedName: "subjectType",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorList = {
        serializedName: "errorList",
        type: {
            name: "Composite",
            className: "ErrorList",
            modelProperties: {
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                }
            }
        }
    };
    var AddressValidation = {
        serializedName: "AddressValidation",
        type: {
            name: "Composite",
            className: "AddressValidation",
            modelProperties: {
                decision: {
                    serializedName: "decision",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Composite",
                        className: "ErrorList"
                    }
                },
                suggestedAddresses: {
                    serializedName: "suggestedAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Address"
                            }
                        }
                    }
                }
            }
        }
    };
    var Price = {
        serializedName: "Price",
        type: {
            name: "Composite",
            className: "Price",
            modelProperties: {
                currencyIso: {
                    serializedName: "currencyIso",
                    type: {
                        name: "String"
                    }
                },
                formattedValue: {
                    serializedName: "formattedValue",
                    type: {
                        name: "String"
                    }
                },
                maxQuantity: {
                    serializedName: "maxQuantity",
                    type: {
                        name: "Number"
                    }
                },
                minQuantity: {
                    serializedName: "minQuantity",
                    type: {
                        name: "Number"
                    }
                },
                priceType: {
                    serializedName: "priceType",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Stock = {
        serializedName: "Stock",
        type: {
            name: "Composite",
            className: "Stock",
            modelProperties: {
                stockLevel: {
                    serializedName: "stockLevel",
                    type: {
                        name: "Number"
                    }
                },
                stockLevelStatus: {
                    serializedName: "stockLevelStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Image = {
        serializedName: "Image",
        type: {
            name: "Composite",
            className: "Image",
            modelProperties: {
                altText: {
                    serializedName: "altText",
                    type: {
                        name: "String"
                    }
                },
                format: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                galleryIndex: {
                    serializedName: "galleryIndex",
                    type: {
                        name: "Number"
                    }
                },
                imageType: {
                    serializedName: "imageType",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VariantOptionQualifier = {
        serializedName: "VariantOptionQualifier",
        type: {
            name: "Composite",
            className: "VariantOptionQualifier",
            modelProperties: {
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                qualifier: {
                    serializedName: "qualifier",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VariantOption = {
        serializedName: "VariantOption",
        type: {
            name: "Composite",
            className: "VariantOption",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                priceData: {
                    serializedName: "priceData",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                stock: {
                    serializedName: "stock",
                    type: {
                        name: "Composite",
                        className: "Stock"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                variantOptionQualifiers: {
                    serializedName: "variantOptionQualifiers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantOptionQualifier"
                            }
                        }
                    }
                }
            }
        }
    };
    var BaseOption = {
        serializedName: "BaseOption",
        type: {
            name: "Composite",
            className: "BaseOption",
            modelProperties: {
                options: {
                    serializedName: "options",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantOption"
                            }
                        }
                    }
                },
                selected: {
                    serializedName: "selected",
                    type: {
                        name: "Composite",
                        className: "VariantOption"
                    }
                },
                variantType: {
                    serializedName: "variantType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Currency = {
        serializedName: "Currency",
        type: {
            name: "Composite",
            className: "Currency",
            modelProperties: {
                active: {
                    serializedName: "active",
                    type: {
                        name: "Boolean"
                    }
                },
                isocode: {
                    serializedName: "isocode",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                symbol: {
                    serializedName: "symbol",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GeoPoint = {
        serializedName: "GeoPoint",
        type: {
            name: "Composite",
            className: "GeoPoint",
            modelProperties: {
                latitude: {
                    serializedName: "latitude",
                    type: {
                        name: "Number"
                    }
                },
                longitude: {
                    serializedName: "longitude",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Time = {
        serializedName: "Time",
        type: {
            name: "Composite",
            className: "Time",
            modelProperties: {
                formattedHour: {
                    serializedName: "formattedHour",
                    type: {
                        name: "String"
                    }
                },
                hour: {
                    serializedName: "hour",
                    type: {
                        name: "ByteArray"
                    }
                },
                minute: {
                    serializedName: "minute",
                    type: {
                        name: "ByteArray"
                    }
                }
            }
        }
    };
    var SpecialOpeningDay = {
        serializedName: "SpecialOpeningDay",
        type: {
            name: "Composite",
            className: "SpecialOpeningDay",
            modelProperties: {
                closed: {
                    serializedName: "closed",
                    type: {
                        name: "Boolean"
                    }
                },
                closingTime: {
                    serializedName: "closingTime",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                },
                comment: {
                    serializedName: "comment",
                    type: {
                        name: "String"
                    }
                },
                date: {
                    serializedName: "date",
                    type: {
                        name: "DateTime"
                    }
                },
                formattedDate: {
                    serializedName: "formattedDate",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                openingTime: {
                    serializedName: "openingTime",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                }
            }
        }
    };
    var WeekdayOpeningDay = {
        serializedName: "WeekdayOpeningDay",
        type: {
            name: "Composite",
            className: "WeekdayOpeningDay",
            modelProperties: {
                closed: {
                    serializedName: "closed",
                    type: {
                        name: "Boolean"
                    }
                },
                closingTime: {
                    serializedName: "closingTime",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                },
                openingTime: {
                    serializedName: "openingTime",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                },
                weekDay: {
                    serializedName: "weekDay",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpeningSchedule = {
        serializedName: "OpeningSchedule",
        type: {
            name: "Composite",
            className: "OpeningSchedule",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                specialDayOpeningList: {
                    serializedName: "specialDayOpeningList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SpecialOpeningDay"
                            }
                        }
                    }
                },
                weekDayOpeningList: {
                    serializedName: "weekDayOpeningList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WeekdayOpeningDay"
                            }
                        }
                    }
                }
            }
        }
    };
    var PointOfService = {
        serializedName: "PointOfService",
        type: {
            name: "Composite",
            className: "PointOfService",
            modelProperties: {
                address: {
                    serializedName: "address",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                distanceKm: {
                    serializedName: "distanceKm",
                    type: {
                        name: "Number"
                    }
                },
                features: {
                    serializedName: "features",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                formattedDistance: {
                    serializedName: "formattedDistance",
                    type: {
                        name: "String"
                    }
                },
                geoPoint: {
                    serializedName: "geoPoint",
                    type: {
                        name: "Composite",
                        className: "GeoPoint"
                    }
                },
                mapIcon: {
                    serializedName: "mapIcon",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                openingHours: {
                    serializedName: "openingHours",
                    type: {
                        name: "Composite",
                        className: "OpeningSchedule"
                    }
                },
                storeContent: {
                    serializedName: "storeContent",
                    type: {
                        name: "String"
                    }
                },
                storeImages: {
                    serializedName: "storeImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Language = {
        serializedName: "Language",
        type: {
            name: "Composite",
            className: "Language",
            modelProperties: {
                active: {
                    serializedName: "active",
                    type: {
                        name: "Boolean"
                    }
                },
                isocode: {
                    serializedName: "isocode",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                nativeName: {
                    serializedName: "nativeName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryMode = {
        serializedName: "DeliveryMode",
        type: {
            name: "Composite",
            className: "DeliveryMode",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                deliveryCost: {
                    serializedName: "deliveryCost",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryModeList = {
        serializedName: "DeliveryModeList",
        type: {
            name: "Composite",
            className: "DeliveryModeList",
            modelProperties: {
                deliveryModes: {
                    serializedName: "deliveryModes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeliveryMode"
                            }
                        }
                    }
                }
            }
        }
    };
    var BaseStore = {
        serializedName: "BaseStore",
        type: {
            name: "Composite",
            className: "BaseStore",
            modelProperties: {
                createReturnProcessCode: {
                    serializedName: "createReturnProcessCode",
                    type: {
                        name: "String"
                    }
                },
                currencies: {
                    serializedName: "currencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Currency"
                            }
                        }
                    }
                },
                defaultCurrency: {
                    serializedName: "defaultCurrency",
                    type: {
                        name: "Composite",
                        className: "Currency"
                    }
                },
                defaultDeliveryOrigin: {
                    serializedName: "defaultDeliveryOrigin",
                    type: {
                        name: "Composite",
                        className: "PointOfService"
                    }
                },
                defaultLanguage: {
                    serializedName: "defaultLanguage",
                    type: {
                        name: "Composite",
                        className: "Language"
                    }
                },
                deliveryCountries: {
                    serializedName: "deliveryCountries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Country"
                            }
                        }
                    }
                },
                deliveryModes: {
                    serializedName: "deliveryModes",
                    type: {
                        name: "Composite",
                        className: "DeliveryModeList"
                    }
                },
                externalTaxEnabled: {
                    serializedName: "externalTaxEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                languages: {
                    serializedName: "languages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Language"
                            }
                        }
                    }
                },
                maxRadiusForPosSearch: {
                    serializedName: "maxRadiusForPosSearch",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                paymentProvider: {
                    serializedName: "paymentProvider",
                    type: {
                        name: "String"
                    }
                },
                pointsOfService: {
                    serializedName: "pointsOfService",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PointOfService"
                            }
                        }
                    }
                },
                submitOrderProcessCode: {
                    serializedName: "submitOrderProcessCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SearchQuery = {
        serializedName: "SearchQuery",
        type: {
            name: "Composite",
            className: "SearchQuery",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SearchState = {
        serializedName: "SearchState",
        type: {
            name: "Composite",
            className: "SearchState",
            modelProperties: {
                query: {
                    serializedName: "query",
                    type: {
                        name: "Composite",
                        className: "SearchQuery"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Breadcrumb = {
        serializedName: "Breadcrumb",
        type: {
            name: "Composite",
            className: "Breadcrumb",
            modelProperties: {
                facetCode: {
                    serializedName: "facetCode",
                    type: {
                        name: "String"
                    }
                },
                facetName: {
                    serializedName: "facetName",
                    type: {
                        name: "String"
                    }
                },
                facetValueCode: {
                    serializedName: "facetValueCode",
                    type: {
                        name: "String"
                    }
                },
                facetValueName: {
                    serializedName: "facetValueName",
                    type: {
                        name: "String"
                    }
                },
                removeQuery: {
                    serializedName: "removeQuery",
                    type: {
                        name: "Composite",
                        className: "SearchState"
                    }
                },
                truncateQuery: {
                    serializedName: "truncateQuery",
                    type: {
                        name: "Composite",
                        className: "SearchState"
                    }
                }
            }
        }
    };
    var Component = {
        serializedName: "Component",
        type: {
            name: "Composite",
            className: "Component",
            modelProperties: {
                modifiedtime: {
                    serializedName: "modifiedtime",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                otherProperties: {
                    serializedName: "otherProperties",
                    type: {
                        name: "Object"
                    }
                },
                typeCode: {
                    serializedName: "typeCode",
                    type: {
                        name: "String"
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComponentList = {
        serializedName: "ComponentList",
        type: {
            name: "Composite",
            className: "ComponentList",
            modelProperties: {
                component: {
                    serializedName: "component",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Component"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContentSlot = {
        serializedName: "ContentSlot",
        type: {
            name: "Composite",
            className: "ContentSlot",
            modelProperties: {
                components: {
                    serializedName: "components",
                    type: {
                        name: "Composite",
                        className: "ComponentList"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                position: {
                    serializedName: "position",
                    type: {
                        name: "String"
                    }
                },
                slotId: {
                    serializedName: "slotId",
                    type: {
                        name: "String"
                    }
                },
                slotShared: {
                    serializedName: "slotShared",
                    type: {
                        name: "Boolean"
                    }
                },
                slotStatus: {
                    serializedName: "slotStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentSlotList = {
        serializedName: "ContentSlotList",
        type: {
            name: "Composite",
            className: "ContentSlotList",
            modelProperties: {
                contentSlot: {
                    serializedName: "contentSlot",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentSlot"
                            }
                        }
                    }
                }
            }
        }
    };
    var CMSPage = {
        serializedName: "CMSPage",
        type: {
            name: "Composite",
            className: "CMSPage",
            modelProperties: {
                contentSlots: {
                    serializedName: "contentSlots",
                    type: {
                        name: "Composite",
                        className: "ContentSlotList"
                    }
                },
                defaultPage: {
                    serializedName: "defaultPage",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                template: {
                    serializedName: "template",
                    type: {
                        name: "String"
                    }
                },
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                typeCode: {
                    serializedName: "typeCode",
                    type: {
                        name: "String"
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CardType = {
        serializedName: "CardType",
        type: {
            name: "Composite",
            className: "CardType",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CardTypeList = {
        serializedName: "CardTypeList",
        type: {
            name: "Composite",
            className: "CardTypeList",
            modelProperties: {
                cardTypes: {
                    serializedName: "cardTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CardType"
                            }
                        }
                    }
                }
            }
        }
    };
    var PromotionOrderEntryConsumed = {
        serializedName: "PromotionOrderEntryConsumed",
        type: {
            name: "Composite",
            className: "PromotionOrderEntryConsumed",
            modelProperties: {
                adjustedUnitPrice: {
                    serializedName: "adjustedUnitPrice",
                    type: {
                        name: "Number"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                orderEntryNumber: {
                    serializedName: "orderEntryNumber",
                    type: {
                        name: "Number"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PromotionRestriction = {
        serializedName: "PromotionRestriction",
        type: {
            name: "Composite",
            className: "PromotionRestriction",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                restrictionType: {
                    serializedName: "restrictionType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Promotion = {
        serializedName: "Promotion",
        type: {
            name: "Composite",
            className: "Promotion",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                couldFireMessages: {
                    serializedName: "couldFireMessages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                endDate: {
                    serializedName: "endDate",
                    type: {
                        name: "DateTime"
                    }
                },
                firedMessages: {
                    serializedName: "firedMessages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                productBanner: {
                    serializedName: "productBanner",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                },
                promotionGroup: {
                    serializedName: "promotionGroup",
                    type: {
                        name: "String"
                    }
                },
                promotionType: {
                    serializedName: "promotionType",
                    type: {
                        name: "String"
                    }
                },
                restrictions: {
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionRestriction"
                            }
                        }
                    }
                },
                startDate: {
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                },
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PromotionResult = {
        serializedName: "PromotionResult",
        type: {
            name: "Composite",
            className: "PromotionResult",
            modelProperties: {
                consumedEntries: {
                    serializedName: "consumedEntries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionOrderEntryConsumed"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                promotion: {
                    serializedName: "promotion",
                    type: {
                        name: "Composite",
                        className: "Promotion"
                    }
                }
            }
        }
    };
    var Voucher = {
        serializedName: "Voucher",
        type: {
            name: "Composite",
            className: "Voucher",
            modelProperties: {
                appliedValue: {
                    serializedName: "appliedValue",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                currency: {
                    serializedName: "currency",
                    type: {
                        name: "Composite",
                        className: "Currency"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                freeShipping: {
                    serializedName: "freeShipping",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                valueFormatted: {
                    serializedName: "valueFormatted",
                    type: {
                        name: "String"
                    }
                },
                valueString: {
                    serializedName: "valueString",
                    type: {
                        name: "String"
                    }
                },
                voucherCode: {
                    serializedName: "voucherCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigurationInfo = {
        serializedName: "ConfigurationInfo",
        type: {
            name: "Composite",
            className: "ConfigurationInfo",
            modelProperties: {
                configurationLabel: {
                    serializedName: "configurationLabel",
                    type: {
                        name: "String"
                    }
                },
                configurationValue: {
                    serializedName: "configurationValue",
                    type: {
                        name: "String"
                    }
                },
                configuratorType: {
                    serializedName: "configuratorType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Category = {
        serializedName: "Category",
        type: {
            name: "Composite",
            className: "Category",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FeatureUnit = {
        serializedName: "FeatureUnit",
        type: {
            name: "Composite",
            className: "FeatureUnit",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                symbol: {
                    serializedName: "symbol",
                    type: {
                        name: "String"
                    }
                },
                unitType: {
                    serializedName: "unitType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FeatureValue = {
        serializedName: "FeatureValue",
        type: {
            name: "Composite",
            className: "FeatureValue",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Feature = {
        serializedName: "Feature",
        type: {
            name: "Composite",
            className: "Feature",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                comparable: {
                    serializedName: "comparable",
                    type: {
                        name: "Boolean"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                featureUnit: {
                    serializedName: "featureUnit",
                    type: {
                        name: "Composite",
                        className: "FeatureUnit"
                    }
                },
                featureValues: {
                    serializedName: "featureValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FeatureValue"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                range: {
                    serializedName: "range",
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Classification = {
        serializedName: "Classification",
        type: {
            name: "Composite",
            className: "Classification",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                features: {
                    serializedName: "features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Feature"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FutureStock = {
        serializedName: "FutureStock",
        type: {
            name: "Composite",
            className: "FutureStock",
            modelProperties: {
                date: {
                    serializedName: "date",
                    type: {
                        name: "DateTime"
                    }
                },
                formattedDate: {
                    serializedName: "formattedDate",
                    type: {
                        name: "String"
                    }
                },
                stock: {
                    serializedName: "stock",
                    type: {
                        name: "Composite",
                        className: "Stock"
                    }
                }
            }
        }
    };
    var PriceRange = {
        serializedName: "PriceRange",
        type: {
            name: "Composite",
            className: "PriceRange",
            modelProperties: {
                maxPrice: {
                    serializedName: "maxPrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                minPrice: {
                    serializedName: "minPrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                }
            }
        }
    };
    var ProductReference = {
        serializedName: "ProductReference",
        type: {
            name: "Composite",
            className: "ProductReference",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                preselected: {
                    serializedName: "preselected",
                    type: {
                        name: "Boolean"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                referenceType: {
                    serializedName: "referenceType",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "Composite",
                        className: "Product"
                    }
                }
            }
        }
    };
    var User = {
        serializedName: "User",
        type: {
            name: "Composite",
            className: "User",
            modelProperties: {
                currency: {
                    serializedName: "currency",
                    type: {
                        name: "Composite",
                        className: "Currency"
                    }
                },
                customerId: {
                    serializedName: "customerId",
                    type: {
                        name: "String"
                    }
                },
                deactivationDate: {
                    serializedName: "deactivationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                defaultAddress: {
                    serializedName: "defaultAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                displayUid: {
                    serializedName: "displayUid",
                    type: {
                        name: "String"
                    }
                },
                firstName: {
                    serializedName: "firstName",
                    type: {
                        name: "String"
                    }
                },
                language: {
                    serializedName: "language",
                    type: {
                        name: "Composite",
                        className: "Language"
                    }
                },
                lastName: {
                    serializedName: "lastName",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                titleCode: {
                    serializedName: "titleCode",
                    type: {
                        name: "String"
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Review = {
        serializedName: "Review",
        type: {
            name: "Composite",
            className: "Review",
            modelProperties: {
                alias: {
                    serializedName: "alias",
                    type: {
                        name: "String"
                    }
                },
                comment: {
                    serializedName: "comment",
                    type: {
                        name: "String"
                    }
                },
                date: {
                    serializedName: "date",
                    type: {
                        name: "DateTime"
                    }
                },
                headline: {
                    serializedName: "headline",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                principal: {
                    serializedName: "principal",
                    type: {
                        name: "Composite",
                        className: "User"
                    }
                },
                rating: {
                    serializedName: "rating",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VariantCategory = {
        serializedName: "VariantCategory",
        type: {
            name: "Composite",
            className: "VariantCategory",
            modelProperties: {
                hasImage: {
                    serializedName: "hasImage",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VariantValueCategory = {
        serializedName: "VariantValueCategory",
        type: {
            name: "Composite",
            className: "VariantValueCategory",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sequence: {
                    serializedName: "sequence",
                    type: {
                        name: "Number"
                    }
                },
                superCategories: {
                    serializedName: "superCategories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantCategory"
                            }
                        }
                    }
                }
            }
        }
    };
    var VariantMatrixElement = {
        serializedName: "VariantMatrixElement",
        type: {
            name: "Composite",
            className: "VariantMatrixElement",
            modelProperties: {
                elements: {
                    serializedName: "elements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantMatrixElement"
                            }
                        }
                    }
                },
                isLeaf: {
                    serializedName: "isLeaf",
                    type: {
                        name: "Boolean"
                    }
                },
                parentVariantCategory: {
                    serializedName: "parentVariantCategory",
                    type: {
                        name: "Composite",
                        className: "VariantCategory"
                    }
                },
                variantOption: {
                    serializedName: "variantOption",
                    type: {
                        name: "Composite",
                        className: "VariantOption"
                    }
                },
                variantValueCategory: {
                    serializedName: "variantValueCategory",
                    type: {
                        name: "Composite",
                        className: "VariantValueCategory"
                    }
                }
            }
        }
    };
    var Product = {
        serializedName: "Product",
        type: {
            name: "Composite",
            className: "Product",
            modelProperties: {
                availableForPickup: {
                    serializedName: "availableForPickup",
                    type: {
                        name: "Boolean"
                    }
                },
                averageRating: {
                    serializedName: "averageRating",
                    type: {
                        name: "Number"
                    }
                },
                baseOptions: {
                    serializedName: "baseOptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BaseOption"
                            }
                        }
                    }
                },
                baseProduct: {
                    serializedName: "baseProduct",
                    type: {
                        name: "String"
                    }
                },
                categories: {
                    serializedName: "categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Category"
                            }
                        }
                    }
                },
                classifications: {
                    serializedName: "classifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Classification"
                            }
                        }
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                configurable: {
                    serializedName: "configurable",
                    type: {
                        name: "Boolean"
                    }
                },
                configuratorType: {
                    serializedName: "configuratorType",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                futureStocks: {
                    serializedName: "futureStocks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FutureStock"
                            }
                        }
                    }
                },
                images: {
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                },
                manufacturer: {
                    serializedName: "manufacturer",
                    type: {
                        name: "String"
                    }
                },
                multidimensional: {
                    serializedName: "multidimensional",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                numberOfReviews: {
                    serializedName: "numberOfReviews",
                    type: {
                        name: "Number"
                    }
                },
                potentialPromotions: {
                    serializedName: "potentialPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Promotion"
                            }
                        }
                    }
                },
                price: {
                    serializedName: "price",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                priceRange: {
                    serializedName: "priceRange",
                    type: {
                        name: "Composite",
                        className: "PriceRange"
                    }
                },
                productReferences: {
                    serializedName: "productReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProductReference"
                            }
                        }
                    }
                },
                purchasable: {
                    serializedName: "purchasable",
                    type: {
                        name: "Boolean"
                    }
                },
                reviews: {
                    serializedName: "reviews",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Review"
                            }
                        }
                    }
                },
                stock: {
                    serializedName: "stock",
                    type: {
                        name: "Composite",
                        className: "Stock"
                    }
                },
                summary: {
                    serializedName: "summary",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                variantMatrix: {
                    serializedName: "variantMatrix",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantMatrixElement"
                            }
                        }
                    }
                },
                variantOptions: {
                    serializedName: "variantOptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VariantOption"
                            }
                        }
                    }
                },
                variantType: {
                    serializedName: "variantType",
                    type: {
                        name: "String"
                    }
                },
                volumePrices: {
                    serializedName: "volumePrices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Price"
                            }
                        }
                    }
                },
                volumePricesFlag: {
                    serializedName: "volumePricesFlag",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var OrderEntry = {
        serializedName: "OrderEntry",
        type: {
            name: "Composite",
            className: "OrderEntry",
            modelProperties: {
                basePrice: {
                    serializedName: "basePrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                configurationInfos: {
                    serializedName: "configurationInfos",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConfigurationInfo"
                            }
                        }
                    }
                },
                deliveryMode: {
                    serializedName: "deliveryMode",
                    type: {
                        name: "Composite",
                        className: "DeliveryMode"
                    }
                },
                deliveryPointOfService: {
                    serializedName: "deliveryPointOfService",
                    type: {
                        name: "Composite",
                        className: "PointOfService"
                    }
                },
                entryNumber: {
                    serializedName: "entryNumber",
                    type: {
                        name: "Number"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "Composite",
                        className: "Product"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                totalPrice: {
                    serializedName: "totalPrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                updateable: {
                    serializedName: "updateable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DeliveryOrderEntryGroup = {
        serializedName: "DeliveryOrderEntryGroup",
        type: {
            name: "Composite",
            className: "DeliveryOrderEntryGroup",
            modelProperties: {
                deliveryAddress: {
                    serializedName: "deliveryAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                totalPriceWithTax: {
                    serializedName: "totalPriceWithTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                }
            }
        }
    };
    var PaymentDetails = {
        serializedName: "PaymentDetails",
        type: {
            name: "Composite",
            className: "PaymentDetails",
            modelProperties: {
                accountHolderName: {
                    serializedName: "accountHolderName",
                    type: {
                        name: "String"
                    }
                },
                billingAddress: {
                    serializedName: "billingAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                cardNumber: {
                    serializedName: "cardNumber",
                    type: {
                        name: "String"
                    }
                },
                cardType: {
                    serializedName: "cardType",
                    type: {
                        name: "Composite",
                        className: "CardType"
                    }
                },
                defaultPayment: {
                    serializedName: "defaultPayment",
                    type: {
                        name: "Boolean"
                    }
                },
                expiryMonth: {
                    serializedName: "expiryMonth",
                    type: {
                        name: "String"
                    }
                },
                expiryYear: {
                    serializedName: "expiryYear",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                issueNumber: {
                    serializedName: "issueNumber",
                    type: {
                        name: "String"
                    }
                },
                saved: {
                    serializedName: "saved",
                    type: {
                        name: "Boolean"
                    }
                },
                startMonth: {
                    serializedName: "startMonth",
                    type: {
                        name: "String"
                    }
                },
                startYear: {
                    serializedName: "startYear",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PickupOrderEntryGroup = {
        serializedName: "PickupOrderEntryGroup",
        type: {
            name: "Composite",
            className: "PickupOrderEntryGroup",
            modelProperties: {
                deliveryPointOfService: {
                    serializedName: "deliveryPointOfService",
                    type: {
                        name: "Composite",
                        className: "PointOfService"
                    }
                },
                distance: {
                    serializedName: "distance",
                    type: {
                        name: "Number"
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                totalPriceWithTax: {
                    serializedName: "totalPriceWithTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                }
            }
        }
    };
    var Principal = {
        serializedName: "Principal",
        type: {
            name: "Composite",
            className: "Principal",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Cart = {
        serializedName: "Cart",
        type: {
            name: "Composite",
            className: "Cart",
            modelProperties: {
                appliedOrderPromotions: {
                    serializedName: "appliedOrderPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                appliedProductPromotions: {
                    serializedName: "appliedProductPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                appliedVouchers: {
                    serializedName: "appliedVouchers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Voucher"
                            }
                        }
                    }
                },
                calculated: {
                    serializedName: "calculated",
                    type: {
                        name: "Boolean"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                deliveryAddress: {
                    serializedName: "deliveryAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                deliveryCost: {
                    serializedName: "deliveryCost",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                deliveryItemsQuantity: {
                    serializedName: "deliveryItemsQuantity",
                    type: {
                        name: "Number"
                    }
                },
                deliveryMode: {
                    serializedName: "deliveryMode",
                    type: {
                        name: "Composite",
                        className: "DeliveryMode"
                    }
                },
                deliveryOrderGroups: {
                    serializedName: "deliveryOrderGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeliveryOrderEntryGroup"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                },
                expirationTime: {
                    serializedName: "expirationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                guid: {
                    serializedName: "guid",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                net: {
                    serializedName: "net",
                    type: {
                        name: "Boolean"
                    }
                },
                orderDiscounts: {
                    serializedName: "orderDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                paymentInfo: {
                    serializedName: "paymentInfo",
                    type: {
                        name: "Composite",
                        className: "PaymentDetails"
                    }
                },
                pickupItemsQuantity: {
                    serializedName: "pickupItemsQuantity",
                    type: {
                        name: "Number"
                    }
                },
                pickupOrderGroups: {
                    serializedName: "pickupOrderGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PickupOrderEntryGroup"
                            }
                        }
                    }
                },
                potentialOrderPromotions: {
                    serializedName: "potentialOrderPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                potentialProductPromotions: {
                    serializedName: "potentialProductPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                productDiscounts: {
                    serializedName: "productDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                saveTime: {
                    serializedName: "saveTime",
                    type: {
                        name: "DateTime"
                    }
                },
                savedBy: {
                    serializedName: "savedBy",
                    type: {
                        name: "Composite",
                        className: "Principal"
                    }
                },
                site: {
                    serializedName: "site",
                    type: {
                        name: "String"
                    }
                },
                store: {
                    serializedName: "store",
                    type: {
                        name: "String"
                    }
                },
                subTotal: {
                    serializedName: "subTotal",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalDiscounts: {
                    serializedName: "totalDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalItems: {
                    serializedName: "totalItems",
                    type: {
                        name: "Number"
                    }
                },
                totalPrice: {
                    serializedName: "totalPrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalPriceWithTax: {
                    serializedName: "totalPriceWithTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalTax: {
                    serializedName: "totalTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalUnitCount: {
                    serializedName: "totalUnitCount",
                    type: {
                        name: "Number"
                    }
                },
                user: {
                    serializedName: "user",
                    type: {
                        name: "Composite",
                        className: "Principal"
                    }
                }
            }
        }
    };
    var CartList = {
        serializedName: "CartList",
        type: {
            name: "Composite",
            className: "CartList",
            modelProperties: {
                carts: {
                    serializedName: "carts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Cart"
                            }
                        }
                    }
                }
            }
        }
    };
    var CartModification = {
        serializedName: "CartModification",
        type: {
            name: "Composite",
            className: "CartModification",
            modelProperties: {
                deliveryModeChanged: {
                    serializedName: "deliveryModeChanged",
                    type: {
                        name: "Boolean"
                    }
                },
                entry: {
                    serializedName: "entry",
                    type: {
                        name: "Composite",
                        className: "OrderEntry"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                quantityAdded: {
                    serializedName: "quantityAdded",
                    type: {
                        name: "Number"
                    }
                },
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CartModificationList = {
        serializedName: "CartModificationList",
        type: {
            name: "Composite",
            className: "CartModificationList",
            modelProperties: {
                cartModifications: {
                    serializedName: "cartModifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CartModification"
                            }
                        }
                    }
                }
            }
        }
    };
    var CategoryHierarchy = {
        serializedName: "CategoryHierarchy",
        type: {
            name: "Composite",
            className: "CategoryHierarchy",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subcategories: {
                    serializedName: "subcategories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CategoryHierarchy"
                            }
                        }
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CatalogVersion = {
        serializedName: "CatalogVersion",
        type: {
            name: "Composite",
            className: "CatalogVersion",
            modelProperties: {
                categories: {
                    serializedName: "categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CategoryHierarchy"
                            }
                        }
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Catalog = {
        serializedName: "Catalog",
        type: {
            name: "Composite",
            className: "Catalog",
            modelProperties: {
                catalogVersions: {
                    serializedName: "catalogVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CatalogVersion"
                            }
                        }
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CatalogList = {
        serializedName: "CatalogList",
        type: {
            name: "Composite",
            className: "CatalogList",
            modelProperties: {
                catalogs: {
                    serializedName: "catalogs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Catalog"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComponentIDList = {
        serializedName: "ComponentIDList",
        type: {
            name: "Composite",
            className: "ComponentIDList",
            modelProperties: {
                idList: {
                    serializedName: "idList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Consent = {
        serializedName: "Consent",
        type: {
            name: "Composite",
            className: "Consent",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                consentGivenDate: {
                    serializedName: "consentGivenDate",
                    type: {
                        name: "DateTime"
                    }
                },
                consentWithdrawnDate: {
                    serializedName: "consentWithdrawnDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ConsentTemplate = {
        serializedName: "ConsentTemplate",
        type: {
            name: "Composite",
            className: "ConsentTemplate",
            modelProperties: {
                currentConsent: {
                    serializedName: "currentConsent",
                    type: {
                        name: "Composite",
                        className: "Consent"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConsentTemplateList = {
        serializedName: "ConsentTemplateList",
        type: {
            name: "Composite",
            className: "ConsentTemplateList",
            modelProperties: {
                consentTemplates: {
                    serializedName: "consentTemplates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConsentTemplate"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConsignmentEntry = {
        serializedName: "ConsignmentEntry",
        type: {
            name: "Composite",
            className: "ConsignmentEntry",
            modelProperties: {
                orderEntry: {
                    serializedName: "orderEntry",
                    type: {
                        name: "Composite",
                        className: "OrderEntry"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                shippedQuantity: {
                    serializedName: "shippedQuantity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Consignment = {
        serializedName: "Consignment",
        type: {
            name: "Composite",
            className: "Consignment",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                deliveryPointOfService: {
                    serializedName: "deliveryPointOfService",
                    type: {
                        name: "Composite",
                        className: "PointOfService"
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConsignmentEntry"
                            }
                        }
                    }
                },
                shippingAddress: {
                    serializedName: "shippingAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDate: {
                    serializedName: "statusDate",
                    type: {
                        name: "DateTime"
                    }
                },
                trackingID: {
                    serializedName: "trackingID",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CountryList = {
        serializedName: "CountryList",
        type: {
            name: "Composite",
            className: "CountryList",
            modelProperties: {
                countries: {
                    serializedName: "countries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Country"
                            }
                        }
                    }
                }
            }
        }
    };
    var CurrencyList = {
        serializedName: "CurrencyList",
        type: {
            name: "Composite",
            className: "CurrencyList",
            modelProperties: {
                currencies: {
                    serializedName: "currencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Currency"
                            }
                        }
                    }
                }
            }
        }
    };
    var FacetValue = {
        serializedName: "FacetValue",
        type: {
            name: "Composite",
            className: "FacetValue",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                query: {
                    serializedName: "query",
                    type: {
                        name: "Composite",
                        className: "SearchState"
                    }
                },
                selected: {
                    serializedName: "selected",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Facet = {
        serializedName: "Facet",
        type: {
            name: "Composite",
            className: "Facet",
            modelProperties: {
                category: {
                    serializedName: "category",
                    type: {
                        name: "Boolean"
                    }
                },
                multiSelect: {
                    serializedName: "multiSelect",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                topValues: {
                    serializedName: "topValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FacetValue"
                            }
                        }
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FacetValue"
                            }
                        }
                    }
                },
                visible: {
                    serializedName: "visible",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var LanguageList = {
        serializedName: "LanguageList",
        type: {
            name: "Composite",
            className: "LanguageList",
            modelProperties: {
                languages: {
                    serializedName: "languages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Language"
                            }
                        }
                    }
                }
            }
        }
    };
    var Pagination = {
        serializedName: "pagination",
        type: {
            name: "Composite",
            className: "Pagination",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                hasNext: {
                    serializedName: "hasNext",
                    type: {
                        name: "Boolean"
                    }
                },
                hasPrevious: {
                    serializedName: "hasPrevious",
                    type: {
                        name: "Boolean"
                    }
                },
                page: {
                    serializedName: "page",
                    type: {
                        name: "Number"
                    }
                },
                totalCount: {
                    serializedName: "totalCount",
                    type: {
                        name: "Number"
                    }
                },
                totalPages: {
                    serializedName: "totalPages",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Sort = {
        serializedName: "sort",
        type: {
            name: "Composite",
            className: "Sort",
            modelProperties: {
                asc: {
                    serializedName: "asc",
                    type: {
                        name: "Boolean"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListAdaptedComponents = {
        serializedName: "ListAdaptedComponents",
        type: {
            name: "Composite",
            className: "ListAdaptedComponents",
            modelProperties: {
                components: {
                    serializedName: "components",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                pagination: {
                    serializedName: "pagination",
                    type: {
                        name: "Composite",
                        className: "Pagination"
                    }
                },
                sorts: {
                    serializedName: "sorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Sort"
                            }
                        }
                    }
                }
            }
        }
    };
    var MemberList = {
        serializedName: "MemberList",
        type: {
            name: "Composite",
            className: "MemberList",
            modelProperties: {
                members: {
                    serializedName: "members",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Principal"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrderEntryList = {
        serializedName: "OrderEntryList",
        type: {
            name: "Composite",
            className: "OrderEntryList",
            modelProperties: {
                orderEntries: {
                    serializedName: "orderEntries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrderHistory = {
        serializedName: "OrderHistory",
        type: {
            name: "Composite",
            className: "OrderHistory",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                guid: {
                    serializedName: "guid",
                    type: {
                        name: "String"
                    }
                },
                placed: {
                    serializedName: "placed",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDisplay: {
                    serializedName: "statusDisplay",
                    type: {
                        name: "String"
                    }
                },
                total: {
                    serializedName: "total",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                }
            }
        }
    };
    var PaginationModel = {
        serializedName: "Pagination",
        type: {
            name: "Composite",
            className: "PaginationModel",
            modelProperties: {
                currentPage: {
                    serializedName: "currentPage",
                    type: {
                        name: "Number"
                    }
                },
                pageSize: {
                    serializedName: "pageSize",
                    type: {
                        name: "Number"
                    }
                },
                sort: {
                    serializedName: "sort",
                    type: {
                        name: "String"
                    }
                },
                totalPages: {
                    serializedName: "totalPages",
                    type: {
                        name: "Number"
                    }
                },
                totalResults: {
                    serializedName: "totalResults",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SortModel = {
        serializedName: "Sort",
        type: {
            name: "Composite",
            className: "SortModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                selected: {
                    serializedName: "selected",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var OrderHistoryList = {
        serializedName: "OrderHistoryList",
        type: {
            name: "Composite",
            className: "OrderHistoryList",
            modelProperties: {
                orders: {
                    serializedName: "orders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderHistory"
                            }
                        }
                    }
                },
                pagination: {
                    serializedName: "pagination",
                    type: {
                        name: "Composite",
                        className: "PaginationModel"
                    }
                },
                sorts: {
                    serializedName: "sorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SortModel"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrderStatusUpdateElement = {
        serializedName: "OrderStatusUpdateElement",
        type: {
            name: "Composite",
            className: "OrderStatusUpdateElement",
            modelProperties: {
                baseSiteId: {
                    serializedName: "baseSiteId",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OrderStatusUpdateElementList = {
        serializedName: "OrderStatusUpdateElementList",
        type: {
            name: "Composite",
            className: "OrderStatusUpdateElementList",
            modelProperties: {
                orderStatusUpdateElements: {
                    serializedName: "orderStatusUpdateElements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderStatusUpdateElement"
                            }
                        }
                    }
                }
            }
        }
    };
    var Order = {
        serializedName: "Order",
        type: {
            name: "Composite",
            className: "Order",
            modelProperties: {
                appliedOrderPromotions: {
                    serializedName: "appliedOrderPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                appliedProductPromotions: {
                    serializedName: "appliedProductPromotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                },
                appliedVouchers: {
                    serializedName: "appliedVouchers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Voucher"
                            }
                        }
                    }
                },
                calculated: {
                    serializedName: "calculated",
                    type: {
                        name: "Boolean"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                consignments: {
                    serializedName: "consignments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Consignment"
                            }
                        }
                    }
                },
                created: {
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                deliveryAddress: {
                    serializedName: "deliveryAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                deliveryCost: {
                    serializedName: "deliveryCost",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                deliveryItemsQuantity: {
                    serializedName: "deliveryItemsQuantity",
                    type: {
                        name: "Number"
                    }
                },
                deliveryMode: {
                    serializedName: "deliveryMode",
                    type: {
                        name: "Composite",
                        className: "DeliveryMode"
                    }
                },
                deliveryOrderGroups: {
                    serializedName: "deliveryOrderGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeliveryOrderEntryGroup"
                            }
                        }
                    }
                },
                deliveryStatus: {
                    serializedName: "deliveryStatus",
                    type: {
                        name: "String"
                    }
                },
                deliveryStatusDisplay: {
                    serializedName: "deliveryStatusDisplay",
                    type: {
                        name: "String"
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                },
                guestCustomer: {
                    serializedName: "guestCustomer",
                    type: {
                        name: "Boolean"
                    }
                },
                guid: {
                    serializedName: "guid",
                    type: {
                        name: "String"
                    }
                },
                net: {
                    serializedName: "net",
                    type: {
                        name: "Boolean"
                    }
                },
                orderDiscounts: {
                    serializedName: "orderDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                paymentInfo: {
                    serializedName: "paymentInfo",
                    type: {
                        name: "Composite",
                        className: "PaymentDetails"
                    }
                },
                pickupItemsQuantity: {
                    serializedName: "pickupItemsQuantity",
                    type: {
                        name: "Number"
                    }
                },
                pickupOrderGroups: {
                    serializedName: "pickupOrderGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PickupOrderEntryGroup"
                            }
                        }
                    }
                },
                productDiscounts: {
                    serializedName: "productDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                site: {
                    serializedName: "site",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDisplay: {
                    serializedName: "statusDisplay",
                    type: {
                        name: "String"
                    }
                },
                store: {
                    serializedName: "store",
                    type: {
                        name: "String"
                    }
                },
                subTotal: {
                    serializedName: "subTotal",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalDiscounts: {
                    serializedName: "totalDiscounts",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalItems: {
                    serializedName: "totalItems",
                    type: {
                        name: "Number"
                    }
                },
                totalPrice: {
                    serializedName: "totalPrice",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalPriceWithTax: {
                    serializedName: "totalPriceWithTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                totalTax: {
                    serializedName: "totalTax",
                    type: {
                        name: "Composite",
                        className: "Price"
                    }
                },
                unconsignedEntries: {
                    serializedName: "unconsignedEntries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderEntry"
                            }
                        }
                    }
                },
                user: {
                    serializedName: "user",
                    type: {
                        name: "Composite",
                        className: "Principal"
                    }
                }
            }
        }
    };
    var PaymentDetailsList = {
        serializedName: "PaymentDetailsList",
        type: {
            name: "Composite",
            className: "PaymentDetailsList",
            modelProperties: {
                payments: {
                    serializedName: "payments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PaymentDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var PaymentRequest = {
        serializedName: "PaymentRequest",
        type: {
            name: "Composite",
            className: "PaymentRequest",
            modelProperties: {
                mappingLabels: {
                    serializedName: "mappingLabels",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                postUrl: {
                    serializedName: "postUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PointOfServiceList = {
        serializedName: "PointOfServiceList",
        type: {
            name: "Composite",
            className: "PointOfServiceList",
            modelProperties: {
                pointOfServices: {
                    serializedName: "pointOfServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PointOfService"
                            }
                        }
                    }
                }
            }
        }
    };
    var PointOfServiceStock = {
        serializedName: "PointOfServiceStock",
        type: {
            name: "Composite",
            className: "PointOfServiceStock",
            modelProperties: {
                address: {
                    serializedName: "address",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                distanceKm: {
                    serializedName: "distanceKm",
                    type: {
                        name: "Number"
                    }
                },
                features: {
                    serializedName: "features",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                formattedDistance: {
                    serializedName: "formattedDistance",
                    type: {
                        name: "String"
                    }
                },
                geoPoint: {
                    serializedName: "geoPoint",
                    type: {
                        name: "Composite",
                        className: "GeoPoint"
                    }
                },
                mapIcon: {
                    serializedName: "mapIcon",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                openingHours: {
                    serializedName: "openingHours",
                    type: {
                        name: "Composite",
                        className: "OpeningSchedule"
                    }
                },
                stockInfo: {
                    serializedName: "stockInfo",
                    type: {
                        name: "Composite",
                        className: "Stock"
                    }
                },
                storeContent: {
                    serializedName: "storeContent",
                    type: {
                        name: "String"
                    }
                },
                storeImages: {
                    serializedName: "storeImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductExpressUpdateElement = {
        serializedName: "ProductExpressUpdateElement",
        type: {
            name: "Composite",
            className: "ProductExpressUpdateElement",
            modelProperties: {
                catalogId: {
                    serializedName: "catalogId",
                    type: {
                        name: "String"
                    }
                },
                catalogVersion: {
                    serializedName: "catalogVersion",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductExpressUpdateElementList = {
        serializedName: "ProductExpressUpdateElementList",
        type: {
            name: "Composite",
            className: "ProductExpressUpdateElementList",
            modelProperties: {
                productExpressUpdateElements: {
                    serializedName: "productExpressUpdateElements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProductExpressUpdateElement"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProductList = {
        serializedName: "ProductList",
        type: {
            name: "Composite",
            className: "ProductList",
            modelProperties: {
                catalog: {
                    serializedName: "catalog",
                    type: {
                        name: "String"
                    }
                },
                currentPage: {
                    serializedName: "currentPage",
                    type: {
                        name: "Number"
                    }
                },
                products: {
                    serializedName: "products",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Product"
                            }
                        }
                    }
                },
                totalPageCount: {
                    serializedName: "totalPageCount",
                    type: {
                        name: "Number"
                    }
                },
                totalProductCount: {
                    serializedName: "totalProductCount",
                    type: {
                        name: "Number"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductReferenceList = {
        serializedName: "ProductReferenceList",
        type: {
            name: "Composite",
            className: "ProductReferenceList",
            modelProperties: {
                references: {
                    serializedName: "references",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProductReference"
                            }
                        }
                    }
                }
            }
        }
    };
    var SpellingSuggestion = {
        serializedName: "SpellingSuggestion",
        type: {
            name: "Composite",
            className: "SpellingSuggestion",
            modelProperties: {
                query: {
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                suggestion: {
                    serializedName: "suggestion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductSearchPage = {
        serializedName: "ProductSearchPage",
        type: {
            name: "Composite",
            className: "ProductSearchPage",
            modelProperties: {
                breadcrumbs: {
                    serializedName: "breadcrumbs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Breadcrumb"
                            }
                        }
                    }
                },
                categoryCode: {
                    serializedName: "categoryCode",
                    type: {
                        name: "String"
                    }
                },
                currentQuery: {
                    serializedName: "currentQuery",
                    type: {
                        name: "Composite",
                        className: "SearchState"
                    }
                },
                facets: {
                    serializedName: "facets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Facet"
                            }
                        }
                    }
                },
                freeTextSearch: {
                    serializedName: "freeTextSearch",
                    type: {
                        name: "String"
                    }
                },
                keywordRedirectUrl: {
                    serializedName: "keywordRedirectUrl",
                    type: {
                        name: "String"
                    }
                },
                pagination: {
                    serializedName: "pagination",
                    type: {
                        name: "Composite",
                        className: "PaginationModel"
                    }
                },
                products: {
                    serializedName: "products",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Product"
                            }
                        }
                    }
                },
                sorts: {
                    serializedName: "sorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SortModel"
                            }
                        }
                    }
                },
                spellingSuggestion: {
                    serializedName: "spellingSuggestion",
                    type: {
                        name: "Composite",
                        className: "SpellingSuggestion"
                    }
                }
            }
        }
    };
    var PromotionList = {
        serializedName: "PromotionList",
        type: {
            name: "Composite",
            className: "PromotionList",
            modelProperties: {
                promotions: {
                    serializedName: "promotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Promotion"
                            }
                        }
                    }
                }
            }
        }
    };
    var PromotionResultList = {
        serializedName: "PromotionResultList",
        type: {
            name: "Composite",
            className: "PromotionResultList",
            modelProperties: {
                promotions: {
                    serializedName: "promotions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PromotionResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegionList = {
        serializedName: "RegionList",
        type: {
            name: "Composite",
            className: "RegionList",
            modelProperties: {
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Region"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReviewList = {
        serializedName: "ReviewList",
        type: {
            name: "Composite",
            className: "ReviewList",
            modelProperties: {
                reviews: {
                    serializedName: "reviews",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Review"
                            }
                        }
                    }
                }
            }
        }
    };
    var SaveCartResult = {
        serializedName: "SaveCartResult",
        type: {
            name: "Composite",
            className: "SaveCartResult",
            modelProperties: {
                savedCartData: {
                    serializedName: "savedCartData",
                    type: {
                        name: "Composite",
                        className: "Cart"
                    }
                }
            }
        }
    };
    var StoreFinderSearchPage = {
        serializedName: "StoreFinderSearchPage",
        type: {
            name: "Composite",
            className: "StoreFinderSearchPage",
            modelProperties: {
                boundEastLongitude: {
                    serializedName: "boundEastLongitude",
                    type: {
                        name: "Number"
                    }
                },
                boundNorthLatitude: {
                    serializedName: "boundNorthLatitude",
                    type: {
                        name: "Number"
                    }
                },
                boundSouthLatitude: {
                    serializedName: "boundSouthLatitude",
                    type: {
                        name: "Number"
                    }
                },
                boundWestLongitude: {
                    serializedName: "boundWestLongitude",
                    type: {
                        name: "Number"
                    }
                },
                locationText: {
                    serializedName: "locationText",
                    type: {
                        name: "String"
                    }
                },
                pagination: {
                    serializedName: "pagination",
                    type: {
                        name: "Composite",
                        className: "PaginationModel"
                    }
                },
                sorts: {
                    serializedName: "sorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SortModel"
                            }
                        }
                    }
                },
                sourceLatitude: {
                    serializedName: "sourceLatitude",
                    type: {
                        name: "Number"
                    }
                },
                sourceLongitude: {
                    serializedName: "sourceLongitude",
                    type: {
                        name: "Number"
                    }
                },
                stores: {
                    serializedName: "stores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PointOfService"
                            }
                        }
                    }
                }
            }
        }
    };
    var StoreFinderStockSearchPage = {
        serializedName: "StoreFinderStockSearchPage",
        type: {
            name: "Composite",
            className: "StoreFinderStockSearchPage",
            modelProperties: {
                boundEastLongitude: {
                    serializedName: "boundEastLongitude",
                    type: {
                        name: "Number"
                    }
                },
                boundNorthLatitude: {
                    serializedName: "boundNorthLatitude",
                    type: {
                        name: "Number"
                    }
                },
                boundSouthLatitude: {
                    serializedName: "boundSouthLatitude",
                    type: {
                        name: "Number"
                    }
                },
                boundWestLongitude: {
                    serializedName: "boundWestLongitude",
                    type: {
                        name: "Number"
                    }
                },
                locationText: {
                    serializedName: "locationText",
                    type: {
                        name: "String"
                    }
                },
                pagination: {
                    serializedName: "pagination",
                    type: {
                        name: "Composite",
                        className: "PaginationModel"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "Composite",
                        className: "Product"
                    }
                },
                sorts: {
                    serializedName: "sorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SortModel"
                            }
                        }
                    }
                },
                sourceLatitude: {
                    serializedName: "sourceLatitude",
                    type: {
                        name: "Number"
                    }
                },
                sourceLongitude: {
                    serializedName: "sourceLongitude",
                    type: {
                        name: "Number"
                    }
                },
                stores: {
                    serializedName: "stores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PointOfServiceStock"
                            }
                        }
                    }
                }
            }
        }
    };
    var Suggestion = {
        serializedName: "Suggestion",
        type: {
            name: "Composite",
            className: "Suggestion",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SuggestionList = {
        serializedName: "SuggestionList",
        type: {
            name: "Composite",
            className: "SuggestionList",
            modelProperties: {
                suggestions: {
                    serializedName: "suggestions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Suggestion"
                            }
                        }
                    }
                }
            }
        }
    };
    var Title = {
        serializedName: "Title",
        type: {
            name: "Composite",
            className: "Title",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TitleList = {
        serializedName: "TitleList",
        type: {
            name: "Composite",
            className: "TitleList",
            modelProperties: {
                titles: {
                    serializedName: "titles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Title"
                            }
                        }
                    }
                }
            }
        }
    };
    var UserGroup = {
        serializedName: "UserGroup",
        type: {
            name: "Composite",
            className: "UserGroup",
            modelProperties: {
                members: {
                    serializedName: "members",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Principal"
                            }
                        }
                    }
                },
                membersCount: {
                    serializedName: "membersCount",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subGroups: {
                    serializedName: "subGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserGroup"
                            }
                        }
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserGroupList = {
        serializedName: "UserGroupList",
        type: {
            name: "Composite",
            className: "UserGroupList",
            modelProperties: {
                currentPage: {
                    serializedName: "currentPage",
                    type: {
                        name: "Number"
                    }
                },
                numberOfPages: {
                    serializedName: "numberOfPages",
                    type: {
                        name: "Number"
                    }
                },
                pageSize: {
                    serializedName: "pageSize",
                    type: {
                        name: "Number"
                    }
                },
                totalNumber: {
                    serializedName: "totalNumber",
                    type: {
                        name: "Number"
                    }
                },
                userGroups: {
                    serializedName: "userGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var UserSignUp = {
        serializedName: "UserSignUp",
        type: {
            name: "Composite",
            className: "UserSignUp",
            modelProperties: {
                firstName: {
                    serializedName: "firstName",
                    type: {
                        name: "String"
                    }
                },
                lastName: {
                    serializedName: "lastName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                titleCode: {
                    serializedName: "titleCode",
                    type: {
                        name: "String"
                    }
                },
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VoucherList = {
        serializedName: "VoucherList",
        type: {
            name: "Composite",
            className: "VoucherList",
            modelProperties: {
                vouchers: {
                    serializedName: "vouchers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Voucher"
                            }
                        }
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        Country: Country,
        Region: Region,
        Address: Address,
        AddressList: AddressList,
        ErrorModel: ErrorModel,
        ErrorList: ErrorList,
        AddressValidation: AddressValidation,
        Price: Price,
        Stock: Stock,
        Image: Image,
        VariantOptionQualifier: VariantOptionQualifier,
        VariantOption: VariantOption,
        BaseOption: BaseOption,
        Currency: Currency,
        GeoPoint: GeoPoint,
        Time: Time,
        SpecialOpeningDay: SpecialOpeningDay,
        WeekdayOpeningDay: WeekdayOpeningDay,
        OpeningSchedule: OpeningSchedule,
        PointOfService: PointOfService,
        Language: Language,
        DeliveryMode: DeliveryMode,
        DeliveryModeList: DeliveryModeList,
        BaseStore: BaseStore,
        SearchQuery: SearchQuery,
        SearchState: SearchState,
        Breadcrumb: Breadcrumb,
        Component: Component,
        ComponentList: ComponentList,
        ContentSlot: ContentSlot,
        ContentSlotList: ContentSlotList,
        CMSPage: CMSPage,
        CardType: CardType,
        CardTypeList: CardTypeList,
        PromotionOrderEntryConsumed: PromotionOrderEntryConsumed,
        PromotionRestriction: PromotionRestriction,
        Promotion: Promotion,
        PromotionResult: PromotionResult,
        Voucher: Voucher,
        ConfigurationInfo: ConfigurationInfo,
        Category: Category,
        FeatureUnit: FeatureUnit,
        FeatureValue: FeatureValue,
        Feature: Feature,
        Classification: Classification,
        FutureStock: FutureStock,
        PriceRange: PriceRange,
        ProductReference: ProductReference,
        User: User,
        Review: Review,
        VariantCategory: VariantCategory,
        VariantValueCategory: VariantValueCategory,
        VariantMatrixElement: VariantMatrixElement,
        Product: Product,
        OrderEntry: OrderEntry,
        DeliveryOrderEntryGroup: DeliveryOrderEntryGroup,
        PaymentDetails: PaymentDetails,
        PickupOrderEntryGroup: PickupOrderEntryGroup,
        Principal: Principal,
        Cart: Cart,
        CartList: CartList,
        CartModification: CartModification,
        CartModificationList: CartModificationList,
        CategoryHierarchy: CategoryHierarchy,
        CatalogVersion: CatalogVersion,
        Catalog: Catalog,
        CatalogList: CatalogList,
        ComponentIDList: ComponentIDList,
        Consent: Consent,
        ConsentTemplate: ConsentTemplate,
        ConsentTemplateList: ConsentTemplateList,
        ConsignmentEntry: ConsignmentEntry,
        Consignment: Consignment,
        CountryList: CountryList,
        CurrencyList: CurrencyList,
        FacetValue: FacetValue,
        Facet: Facet,
        LanguageList: LanguageList,
        Pagination: Pagination,
        Sort: Sort,
        ListAdaptedComponents: ListAdaptedComponents,
        MemberList: MemberList,
        OrderEntryList: OrderEntryList,
        OrderHistory: OrderHistory,
        PaginationModel: PaginationModel,
        SortModel: SortModel,
        OrderHistoryList: OrderHistoryList,
        OrderStatusUpdateElement: OrderStatusUpdateElement,
        OrderStatusUpdateElementList: OrderStatusUpdateElementList,
        Order: Order,
        PaymentDetailsList: PaymentDetailsList,
        PaymentRequest: PaymentRequest,
        PointOfServiceList: PointOfServiceList,
        PointOfServiceStock: PointOfServiceStock,
        ProductExpressUpdateElement: ProductExpressUpdateElement,
        ProductExpressUpdateElementList: ProductExpressUpdateElementList,
        ProductList: ProductList,
        ProductReferenceList: ProductReferenceList,
        SpellingSuggestion: SpellingSuggestion,
        ProductSearchPage: ProductSearchPage,
        PromotionList: PromotionList,
        PromotionResultList: PromotionResultList,
        RegionList: RegionList,
        ReviewList: ReviewList,
        SaveCartResult: SaveCartResult,
        StoreFinderSearchPage: StoreFinderSearchPage,
        StoreFinderStockSearchPage: StoreFinderStockSearchPage,
        Suggestion: Suggestion,
        SuggestionList: SuggestionList,
        Title: Title,
        TitleList: TitleList,
        UserGroup: UserGroup,
        UserGroupList: UserGroupList,
        UserSignUp: UserSignUp,
        VoucherList: VoucherList
    });

    /*
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var accuracy = {
        parameterPath: [
            "options",
            "accuracy"
        ],
        mapper: {
            serializedName: "accuracy",
            defaultValue: 0,
            type: {
                name: "Number"
            }
        }
    };
    var addressId = {
        parameterPath: "addressId",
        mapper: {
            required: true,
            serializedName: "addressId",
            type: {
                name: "String"
            }
        }
    };
    var baseSiteId = {
        parameterPath: "baseSiteId",
        mapper: {
            required: true,
            serializedName: "baseSiteId",
            type: {
                name: "String"
            }
        }
    };
    var baseStoreUid = {
        parameterPath: "baseStoreUid",
        mapper: {
            required: true,
            serializedName: "baseStoreUid",
            type: {
                name: "String"
            }
        }
    };
    var cartId = {
        parameterPath: "cartId",
        mapper: {
            required: true,
            serializedName: "cartId",
            type: {
                name: "String"
            }
        }
    };
    var catalog = {
        parameterPath: [
            "options",
            "catalog"
        ],
        mapper: {
            serializedName: "catalog",
            type: {
                name: "String"
            }
        }
    };
    var catalogCode = {
        parameterPath: [
            "options",
            "catalogCode"
        ],
        mapper: {
            serializedName: "catalogCode",
            type: {
                name: "String"
            }
        }
    };
    var catalogId = {
        parameterPath: "catalogId",
        mapper: {
            required: true,
            serializedName: "catalogId",
            type: {
                name: "String"
            }
        }
    };
    var catalogVersionId = {
        parameterPath: "catalogVersionId",
        mapper: {
            required: true,
            serializedName: "catalogVersionId",
            type: {
                name: "String"
            }
        }
    };
    var categoryCode = {
        parameterPath: [
            "options",
            "categoryCode"
        ],
        mapper: {
            serializedName: "categoryCode",
            type: {
                name: "String"
            }
        }
    };
    var categoryId = {
        parameterPath: "categoryId",
        mapper: {
            required: true,
            serializedName: "categoryId",
            type: {
                name: "String"
            }
        }
    };
    var code0 = {
        parameterPath: [
            "options",
            "code"
        ],
        mapper: {
            serializedName: "code",
            type: {
                name: "String"
            }
        }
    };
    var code1 = {
        parameterPath: "code",
        mapper: {
            required: true,
            serializedName: "code",
            type: {
                name: "String"
            }
        }
    };
    var componentId = {
        parameterPath: "componentId",
        mapper: {
            required: true,
            serializedName: "componentId",
            type: {
                name: "String"
            }
        }
    };
    var consentCode = {
        parameterPath: "consentCode",
        mapper: {
            required: true,
            serializedName: "consentCode",
            type: {
                name: "String"
            }
        }
    };
    var consentTemplateId = {
        parameterPath: "consentTemplateId",
        mapper: {
            required: true,
            serializedName: "consentTemplateId",
            type: {
                name: "String"
            }
        }
    };
    var consentTemplateVersion = {
        parameterPath: "consentTemplateVersion",
        mapper: {
            required: true,
            serializedName: "consentTemplateVersion",
            type: {
                name: "Number"
            }
        }
    };
    var countyIsoCode = {
        parameterPath: "countyIsoCode",
        mapper: {
            required: true,
            serializedName: "countyIsoCode",
            type: {
                name: "String"
            }
        }
    };
    var currentPage = {
        parameterPath: [
            "options",
            "currentPage"
        ],
        mapper: {
            serializedName: "currentPage",
            defaultValue: 0,
            type: {
                name: "Number"
            }
        }
    };
    var deliveryModeId = {
        parameterPath: "deliveryModeId",
        mapper: {
            required: true,
            serializedName: "deliveryModeId",
            type: {
                name: "String"
            }
        }
    };
    var description = {
        parameterPath: [
            "options",
            "description"
        ],
        mapper: {
            serializedName: "description",
            type: {
                name: "String"
            }
        }
    };
    var email = {
        parameterPath: "email",
        mapper: {
            required: true,
            serializedName: "email",
            type: {
                name: "String"
            }
        }
    };
    var entryNumber = {
        parameterPath: "entryNumber",
        mapper: {
            required: true,
            serializedName: "entryNumber",
            type: {
                name: "Number"
            }
        }
    };
    var extendedMerchantCallback = {
        parameterPath: [
            "options",
            "extendedMerchantCallback"
        ],
        mapper: {
            serializedName: "extendedMerchantCallback",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var fields0 = {
        parameterPath: [
            "options",
            "fields"
        ],
        mapper: {
            serializedName: "fields",
            defaultValue: 'DEFAULT',
            type: {
                name: "String"
            }
        }
    };
    var fields1 = {
        parameterPath: [
            "options",
            "fields"
        ],
        mapper: {
            serializedName: "fields",
            defaultValue: 'BASIC',
            type: {
                name: "String"
            }
        }
    };
    var fields2 = {
        parameterPath: "fields",
        mapper: {
            required: true,
            serializedName: "fields",
            defaultValue: 'DEFAULT',
            type: {
                name: "String"
            }
        }
    };
    var groupId = {
        parameterPath: "groupId",
        mapper: {
            required: true,
            serializedName: "groupId",
            type: {
                name: "String"
            }
        }
    };
    var latitude = {
        parameterPath: [
            "options",
            "latitude"
        ],
        mapper: {
            serializedName: "latitude",
            type: {
                name: "Number"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var longitude = {
        parameterPath: [
            "options",
            "longitude"
        ],
        mapper: {
            serializedName: "longitude",
            type: {
                name: "Number"
            }
        }
    };
    var max = {
        parameterPath: "max",
        mapper: {
            required: true,
            serializedName: "max",
            defaultValue: 10,
            type: {
                name: "Number"
            }
        }
    };
    var maxCount = {
        parameterPath: [
            "options",
            "maxCount"
        ],
        mapper: {
            serializedName: "maxCount",
            type: {
                name: "Number"
            }
        }
    };
    var name = {
        parameterPath: [
            "options",
            "name"
        ],
        mapper: {
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var newLogin = {
        parameterPath: "newLogin",
        mapper: {
            required: true,
            serializedName: "newLogin",
            type: {
                name: "String"
            }
        }
    };
    var newParameter = {
        parameterPath: "newParameter",
        mapper: {
            required: true,
            serializedName: "new",
            type: {
                name: "String"
            }
        }
    };
    var old = {
        parameterPath: [
            "options",
            "old"
        ],
        mapper: {
            serializedName: "old",
            type: {
                name: "String"
            }
        }
    };
    var oldCartId = {
        parameterPath: [
            "options",
            "oldCartId"
        ],
        mapper: {
            serializedName: "oldCartId",
            type: {
                name: "String"
            }
        }
    };
    var pageLabelOrId = {
        parameterPath: [
            "options",
            "pageLabelOrId"
        ],
        mapper: {
            serializedName: "pageLabelOrId",
            type: {
                name: "String"
            }
        }
    };
    var pageSize0 = {
        parameterPath: [
            "options",
            "pageSize"
        ],
        mapper: {
            serializedName: "pageSize",
            defaultValue: 10,
            type: {
                name: "Number"
            }
        }
    };
    var pageSize1 = {
        parameterPath: [
            "options",
            "pageSize"
        ],
        mapper: {
            serializedName: "pageSize",
            defaultValue: 20,
            type: {
                name: "Number"
            }
        }
    };
    var pageSize2 = {
        parameterPath: [
            "options",
            "pageSize"
        ],
        mapper: {
            serializedName: "pageSize",
            defaultValue: 2147483647,
            type: {
                name: "Number"
            }
        }
    };
    var pageType = {
        parameterPath: [
            "options",
            "pageType"
        ],
        mapper: {
            serializedName: "pageType",
            defaultValue: 'ContentPage',
            type: {
                name: "String"
            }
        }
    };
    var password = {
        parameterPath: "password",
        mapper: {
            required: true,
            serializedName: "password",
            type: {
                name: "String"
            }
        }
    };
    var paymentDetailsId = {
        parameterPath: "paymentDetailsId",
        mapper: {
            required: true,
            serializedName: "paymentDetailsId",
            type: {
                name: "String"
            }
        }
    };
    var productCode0 = {
        parameterPath: [
            "options",
            "productCode"
        ],
        mapper: {
            serializedName: "productCode",
            type: {
                name: "String"
            }
        }
    };
    var productCode1 = {
        parameterPath: "productCode",
        mapper: {
            required: true,
            serializedName: "productCode",
            type: {
                name: "String"
            }
        }
    };
    var promotionGroup = {
        parameterPath: [
            "options",
            "promotionGroup"
        ],
        mapper: {
            serializedName: "promotionGroup",
            type: {
                name: "String"
            }
        }
    };
    var promotionId = {
        parameterPath: "promotionId",
        mapper: {
            required: true,
            serializedName: "promotionId",
            type: {
                name: "String"
            }
        }
    };
    var query = {
        parameterPath: [
            "options",
            "query"
        ],
        mapper: {
            serializedName: "query",
            type: {
                name: "String"
            }
        }
    };
    var radius = {
        parameterPath: [
            "options",
            "radius"
        ],
        mapper: {
            serializedName: "radius",
            defaultValue: 100000,
            type: {
                name: "Number"
            }
        }
    };
    var referenceType = {
        parameterPath: "referenceType",
        mapper: {
            required: true,
            serializedName: "referenceType",
            type: {
                name: "String"
            }
        }
    };
    var responseUrl = {
        parameterPath: "responseUrl",
        mapper: {
            required: true,
            serializedName: "responseUrl",
            type: {
                name: "String"
            }
        }
    };
    var saveCartDescription = {
        parameterPath: [
            "options",
            "saveCartDescription"
        ],
        mapper: {
            serializedName: "saveCartDescription",
            type: {
                name: "String"
            }
        }
    };
    var saveCartName = {
        parameterPath: [
            "options",
            "saveCartName"
        ],
        mapper: {
            serializedName: "saveCartName",
            type: {
                name: "String"
            }
        }
    };
    var saved = {
        parameterPath: "saved",
        mapper: {
            required: true,
            serializedName: "saved",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var savedCartsOnly = {
        parameterPath: [
            "options",
            "savedCartsOnly"
        ],
        mapper: {
            serializedName: "savedCartsOnly",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var searchQueryContext = {
        parameterPath: [
            "options",
            "searchQueryContext"
        ],
        mapper: {
            serializedName: "searchQueryContext",
            type: {
                name: "String"
            }
        }
    };
    var securityCode = {
        parameterPath: [
            "options",
            "securityCode"
        ],
        mapper: {
            serializedName: "securityCode",
            type: {
                name: "String"
            }
        }
    };
    var sort0 = {
        parameterPath: [
            "options",
            "sort"
        ],
        mapper: {
            serializedName: "sort",
            type: {
                name: "String"
            }
        }
    };
    var sort1 = {
        parameterPath: [
            "options",
            "sort"
        ],
        mapper: {
            serializedName: "sort",
            defaultValue: 'asc',
            type: {
                name: "String"
            }
        }
    };
    var statuses = {
        parameterPath: [
            "options",
            "statuses"
        ],
        mapper: {
            serializedName: "statuses",
            type: {
                name: "String"
            }
        }
    };
    var storeId = {
        parameterPath: "storeId",
        mapper: {
            required: true,
            serializedName: "storeId",
            type: {
                name: "String"
            }
        }
    };
    var storeName = {
        parameterPath: "storeName",
        mapper: {
            required: true,
            serializedName: "storeName",
            type: {
                name: "String"
            }
        }
    };
    var term = {
        parameterPath: "term",
        mapper: {
            required: true,
            serializedName: "term",
            type: {
                name: "String"
            }
        }
    };
    var timestamp0 = {
        parameterPath: [
            "options",
            "timestamp"
        ],
        mapper: {
            serializedName: "timestamp",
            type: {
                name: "String"
            }
        }
    };
    var timestamp1 = {
        parameterPath: "timestamp",
        mapper: {
            required: true,
            serializedName: "timestamp",
            type: {
                name: "String"
            }
        }
    };
    var toMergeCartGuid = {
        parameterPath: [
            "options",
            "toMergeCartGuid"
        ],
        mapper: {
            serializedName: "toMergeCartGuid",
            type: {
                name: "String"
            }
        }
    };
    var type0 = {
        parameterPath: [
            "options",
            "type"
        ],
        mapper: {
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var type1 = {
        parameterPath: "type",
        mapper: {
            required: true,
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var userId = {
        parameterPath: "userId",
        mapper: {
            required: true,
            serializedName: "userId",
            type: {
                name: "String"
            }
        }
    };
    var version = {
        parameterPath: [
            "options",
            "version"
        ],
        mapper: {
            serializedName: "version",
            type: {
                name: "String"
            }
        }
    };
    var voucherId = {
        parameterPath: "voucherId",
        mapper: {
            required: true,
            serializedName: "voucherId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "occ-client";
    var packageVersion = "0.2.0";
    var CommerceWebservicesV2Context = /** @class */ (function (_super) {
        __extends(CommerceWebservicesV2Context, _super);
        /**
         * Initializes a new instance of the CommerceWebservicesV2Context class.
         * @param [options] The parameter options
         */
        function CommerceWebservicesV2Context(options) {
            var _this = this;
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, undefined, options) || this;
            _this.baseUri = options.baseUri || _this.baseUri || "http://localhost:9002";
            _this.requestContentType = "application/json; charset=utf-8";
            return _this;
        }
        return CommerceWebservicesV2Context;
    }(msRest.ServiceClient));

    /*
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CommerceWebservicesV2 = /** @class */ (function (_super) {
        __extends(CommerceWebservicesV2, _super);
        /**
         * Initializes a new instance of the CommerceWebservicesV2 class.
         * @param [options] The parameter options
         */
        function CommerceWebservicesV2(options) {
            return _super.call(this, options) || this;
        }
        CommerceWebservicesV2.prototype.getBaseStore = function (baseStoreUid$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseStoreUid: baseStoreUid$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getBaseStoreOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCardTypes = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCardTypesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCatalogs = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCatalogsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCatalog = function (catalogId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                catalogId: catalogId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCatalogOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCatalogVersion = function (catalogId$$1, catalogVersionId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                catalogId: catalogId$$1,
                catalogVersionId: catalogVersionId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCatalogVersionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCategories = function (catalogId$$1, catalogVersionId$$1, categoryId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                catalogId: catalogId$$1,
                catalogVersionId: catalogVersionId$$1,
                categoryId: categoryId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCategoriesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getComponentByIdListUsingPOST = function (componentIdList, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                componentIdList: componentIdList,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getComponentByIdListUsingPOSTOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getComponentByIdUsingGET = function (componentId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                componentId: componentId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getComponentByIdUsingGETOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getPageDataUsingGET = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getPageDataUsingGETOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCountries = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCountriesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCountryRegions = function (countyIsoCode$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                countyIsoCode: countyIsoCode$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCountryRegionsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCurrencies = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCurrenciesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCustomerGroups = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCustomerGroupsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createCustomerGroup = function (userGroup, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                userGroup: userGroup,
                baseSiteId: baseSiteId$$1,
                options: options
            }, createCustomerGroupOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCustomerGroup = function (groupId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                groupId: groupId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getCustomerGroupOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceUsersForCustomerGroup = function (groupId$$1, members, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                groupId: groupId$$1,
                members: members,
                baseSiteId: baseSiteId$$1,
                options: options
            }, replaceUsersForCustomerGroupOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.updateCustomerGroupWithUsers = function (groupId$$1, members, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                groupId: groupId$$1,
                members: members,
                baseSiteId: baseSiteId$$1,
                options: options
            }, updateCustomerGroupWithUsersOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeUsersFromCustomerGroup = function (groupId$$1, userId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                groupId: groupId$$1,
                userId: userId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, removeUsersFromCustomerGroupOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getDeliveryCountries = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getDeliveryCountriesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getExportedProducts = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getExportedProductsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getOrderStatusFeed = function (timestamp, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                timestamp: timestamp,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getOrderStatusFeedOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doRestorePassword = function (userId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                userId: userId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, doRestorePasswordOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doHandleMerchantCallback = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, doHandleMerchantCallbackOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doHandleCartMerchantCallback = function (userId$$1, cartId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                userId: userId$$1,
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, doHandleCartMerchantCallbackOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getLanguages = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getLanguagesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getOrder = function (code, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                code: code,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getOrderOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getExpressUpdateProducts = function (timestamp, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                timestamp: timestamp,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getExpressUpdateProductsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getProducts = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getProductsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.countProducts = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, countProductsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getSuggestions = function (term$$1, max$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                term: term$$1,
                max: max$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getSuggestionsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getProduct = function (productCode, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getProductOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getProductReferences = function (productCode, referenceType$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                referenceType: referenceType$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getProductReferencesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getProductReviews = function (productCode, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getProductReviewsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createProductReview = function (productCode, review, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                review: review,
                baseSiteId: baseSiteId$$1,
                options: options
            }, createProductReviewOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getLocationProductStock = function (productCode, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getLocationProductStockOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.countProductStockByLocation = function (productCode, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                productCode: productCode,
                baseSiteId: baseSiteId$$1,
                options: options
            }, countProductStockByLocationOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getStoreProductStock = function (baseSiteId$$1, productCode, storeName$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                productCode: productCode,
                storeName: storeName$$1,
                options: options
            }, getStoreProductStockOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getPromotions = function (type, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                type: type,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getPromotionsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getPromotion = function (code, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                code: code,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getPromotionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getStoreLocations = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getStoreLocationsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.countStoreLocations = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, countStoreLocationsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getStoreLocation = function (storeId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                storeId: storeId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getStoreLocationOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getTitles = function (baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                options: options
            }, getTitlesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createUser = function (user, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                user: user,
                baseSiteId: baseSiteId$$1,
                options: options
            }, createUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getUser = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceUser = function (user, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                user: user,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, replaceUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeUser = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, removeUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.updateUser = function (user, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                user: user,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, updateUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getAddresses = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getAddressesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createAddress = function (address, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                address: address,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, createAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.validateAddress = function (address, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                address: address,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, validateAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getAddress = function (addressId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                addressId: addressId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceAddress = function (addressId$$1, address, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                addressId: addressId$$1,
                address: address,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, replaceAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeAddress = function (addressId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                addressId: addressId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, removeAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.updateAddress = function (addressId$$1, address, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                addressId: addressId$$1,
                address: address,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, updateAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCarts = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getCartsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createCart = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, createCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCart = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCart = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createCartDeliveryAddress = function (address, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                address: address,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, createCartDeliveryAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceCartDeliveryAddress = function (addressId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                addressId: addressId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, replaceCartDeliveryAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCartDeliveryAddress = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartDeliveryAddressOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doCartClone = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, doCartCloneOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getConsolidatedPickupLocations = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getConsolidatedPickupLocationsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createConsolidatedPickupLocation = function (storeName$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                storeName: storeName$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, createConsolidatedPickupLocationOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartDeliveryMode = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartDeliveryModeOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceCartDeliveryMode = function (deliveryModeId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                deliveryModeId: deliveryModeId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, replaceCartDeliveryModeOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCartDeliveryMode = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartDeliveryModeOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartDeliveryModes = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartDeliveryModesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceCartGuestUser = function (email$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                email: email$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, replaceCartGuestUserOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartEntries = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartEntriesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createCartEntry = function (entry, userId$$1, cartId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                entry: entry,
                userId: userId$$1,
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, createCartEntryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartEntry = function (entryNumber$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                entryNumber: entryNumber$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartEntryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceCartEntry = function (entryNumber$$1, entry, userId$$1, cartId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                entryNumber: entryNumber$$1,
                entry: entry,
                userId: userId$$1,
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, replaceCartEntryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCartEntry = function (entryNumber$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                entryNumber: entryNumber$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartEntryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.updateCartEntry = function (entryNumber$$1, entry, userId$$1, cartId$$1, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                entryNumber: entryNumber$$1,
                entry: entry,
                userId: userId$$1,
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                options: options
            }, updateCartEntryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doUpdateFlagForDeletion = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, doUpdateFlagForDeletionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getSopPaymentRequestDetails = function (responseUrl$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                responseUrl: responseUrl$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getSopPaymentRequestDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getSopPaymentResponse = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getSopPaymentResponseOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doHandleSopPaymentResponse = function (fields, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                fields: fields,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, doHandleSopPaymentResponseOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeSopPaymentResponse = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeSopPaymentResponseOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.createCartPaymentDetails = function (paymentDetails, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetails: paymentDetails,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, createCartPaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceCartPaymentDetails = function (paymentDetailsId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetailsId: paymentDetailsId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, replaceCartPaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartPromotions = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartPromotionsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doApplyCartPromotion = function (promotionId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                promotionId: promotionId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, doApplyCartPromotionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartPromotion = function (promotionId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                promotionId: promotionId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartPromotionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCartPromotion = function (promotionId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                promotionId: promotionId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartPromotionOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doUpdateSavedCart = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, doUpdateSavedCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doSaveCart = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, doSaveCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getSavedCart = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getSavedCartOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getCartVouchers = function (baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, getCartVouchersOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doApplyCartVoucher = function (voucherId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                voucherId: voucherId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, doApplyCartVoucherOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeCartVoucher = function (voucherId$$1, baseSiteId$$1, userId$$1, cartId$$1, options, callback) {
            return this.sendOperationRequest({
                voucherId: voucherId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                cartId: cartId$$1,
                options: options
            }, removeCartVoucherOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.doGiveConsent = function (consentTemplateId$$1, consentTemplateVersion$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                consentTemplateId: consentTemplateId$$1,
                consentTemplateVersion: consentTemplateVersion$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, doGiveConsentOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removeConsent = function (consentCode$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                consentCode: consentCode$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, removeConsentOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getConsentTemplates = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getConsentTemplatesOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getConsentTemplate = function (consentTemplateId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                consentTemplateId: consentTemplateId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getConsentTemplateOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getUserCustomerGroups = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getUserCustomerGroupsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceUserLogin = function (newLogin$$1, password$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                newLogin: newLogin$$1,
                password: password$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, replaceUserLoginOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getUserOrderHistory = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getUserOrderHistoryOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.countUserOrders = function (baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, countUserOrdersOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.placeOrder = function (cartId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                cartId: cartId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, placeOrderOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getUserOrders = function (code, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                code: code,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getUserOrdersOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replaceUserPassword = function (newParameter$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                newParameter: newParameter$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, replaceUserPasswordOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getPaymentDetailsList = function (saved$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                saved: saved$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getPaymentDetailsListOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getPaymentDetails = function (paymentDetailsId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetailsId: paymentDetailsId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, getPaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.replacePaymentDetails = function (paymentDetailsId$$1, paymentDetails, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetailsId: paymentDetailsId$$1,
                paymentDetails: paymentDetails,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, replacePaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.removePaymentDetails = function (paymentDetailsId$$1, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetailsId: paymentDetailsId$$1,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, removePaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.updatePaymentDetails = function (paymentDetailsId$$1, paymentDetails, baseSiteId$$1, userId$$1, options, callback) {
            return this.sendOperationRequest({
                paymentDetailsId: paymentDetailsId$$1,
                paymentDetails: paymentDetails,
                baseSiteId: baseSiteId$$1,
                userId: userId$$1,
                options: options
            }, updatePaymentDetailsOperationSpec, callback);
        };
        CommerceWebservicesV2.prototype.getVoucher = function (code, baseSiteId$$1, options, callback) {
            return this.sendOperationRequest({
                code: code,
                baseSiteId: baseSiteId$$1,
                options: options
            }, getVoucherOperationSpec, callback);
        };
        return CommerceWebservicesV2;
    }(CommerceWebservicesV2Context));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getBaseStoreOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/basestores/{baseStoreUid}",
        urlParameters: [
            baseStoreUid,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: BaseStore
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCardTypesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/cardtypes",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CardTypeList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCatalogsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/catalogs",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CatalogList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCatalogOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/catalogs/{catalogId}",
        urlParameters: [
            catalogId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Catalog
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCatalogVersionOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}",
        urlParameters: [
            catalogId,
            catalogVersionId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CatalogVersion
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCategoriesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}",
        urlParameters: [
            catalogId,
            catalogVersionId,
            categoryId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CategoryHierarchy
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getComponentByIdListUsingPOSTOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/cms/components",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            catalogCode,
            productCode0,
            categoryCode,
            fields0,
            currentPage,
            pageSize0,
            sort0
        ],
        requestBody: {
            parameterPath: "componentIdList",
            mapper: __assign({}, ComponentIDList, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ListAdaptedComponents
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getComponentByIdUsingGETOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/cms/components/{componentId}",
        urlParameters: [
            componentId,
            baseSiteId
        ],
        queryParameters: [
            catalogCode,
            productCode0,
            categoryCode,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getPageDataUsingGETOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/cms/pages",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            pageType,
            pageLabelOrId,
            code0,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CMSPage
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCountriesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/countries",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            type0,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CountryList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCountryRegionsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/countries/{countyIsoCode}/regions",
        urlParameters: [
            countyIsoCode,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: RegionList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCurrenciesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/currencies",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CurrencyList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCustomerGroupsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/customergroups",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            currentPage,
            pageSize1,
            fields1
        ],
        responses: {
            200: {
                bodyMapper: UserGroupList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createCustomerGroupOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/customergroups",
        urlParameters: [
            baseSiteId
        ],
        requestBody: {
            parameterPath: "userGroup",
            mapper: __assign({}, UserGroup, { required: true })
        },
        responses: {
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCustomerGroupOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/customergroups/{groupId}",
        urlParameters: [
            groupId,
            baseSiteId
        ],
        queryParameters: [
            fields1
        ],
        responses: {
            200: {
                bodyMapper: UserGroup
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceUsersForCustomerGroupOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
        urlParameters: [
            groupId,
            baseSiteId
        ],
        requestBody: {
            parameterPath: "members",
            mapper: __assign({}, MemberList, { required: true })
        },
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var updateCustomerGroupWithUsersOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members",
        urlParameters: [
            groupId,
            baseSiteId
        ],
        requestBody: {
            parameterPath: "members",
            mapper: __assign({}, MemberList, { required: true })
        },
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var removeUsersFromCustomerGroupOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/customergroups/{groupId}/members/{userId}",
        urlParameters: [
            groupId,
            userId,
            baseSiteId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getDeliveryCountriesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/deliverycountries",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CountryList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getExportedProductsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/export/products",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0,
            currentPage,
            pageSize1,
            catalog,
            version,
            timestamp0
        ],
        responses: {
            200: {
                bodyMapper: ProductList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getOrderStatusFeedOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/feeds/orders/statusfeed",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            timestamp1,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: OrderStatusUpdateElementList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doRestorePasswordOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/forgottenpasswordtokens",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            userId
        ],
        responses: {
            201: {},
            202: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doHandleMerchantCallbackOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/integration/merchant_callback",
        urlParameters: [
            baseSiteId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doHandleCartMerchantCallbackOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response",
        urlParameters: [
            userId,
            cartId,
            baseSiteId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getLanguagesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/languages",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: LanguageList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getOrderOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/orders/{code}",
        urlParameters: [
            code1,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Order
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getExpressUpdateProductsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/expressupdate",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            timestamp1,
            catalog,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: ProductExpressUpdateElementList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getProductsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/search",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            query,
            currentPage,
            pageSize1,
            sort0,
            fields0,
            searchQueryContext
        ],
        responses: {
            200: {
                bodyMapper: ProductSearchPage
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var countProductsOperationSpec = {
        httpMethod: "HEAD",
        path: "rest/v2/{baseSiteId}/products/search",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            query
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getSuggestionsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/suggestions",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            term,
            max,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SuggestionList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getProductOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/{productCode}",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Product
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getProductReferencesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/{productCode}/references",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            pageSize2,
            referenceType,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: ProductReferenceList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getProductReviewsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            maxCount,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: ReviewList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createProductReviewOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/products/{productCode}/reviews",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "review",
            mapper: __assign({}, Review, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Review
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getLocationProductStockOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            location,
            latitude,
            longitude,
            currentPage,
            pageSize1,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: StoreFinderStockSearchPage
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var countProductStockByLocationOperationSpec = {
        httpMethod: "HEAD",
        path: "rest/v2/{baseSiteId}/products/{productCode}/stock",
        urlParameters: [
            productCode1,
            baseSiteId
        ],
        queryParameters: [
            location,
            latitude,
            longitude
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getStoreProductStockOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/products/{productCode}/stock/{storeName}",
        urlParameters: [
            baseSiteId,
            productCode1,
            storeName
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Stock
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getPromotionsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/promotions",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            type1,
            promotionGroup,
            fields1
        ],
        responses: {
            200: {
                bodyMapper: PromotionList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getPromotionOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/promotions/{code}",
        urlParameters: [
            code1,
            baseSiteId
        ],
        queryParameters: [
            fields1
        ],
        responses: {
            200: {
                bodyMapper: Promotion
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getStoreLocationsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/stores",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            query,
            latitude,
            longitude,
            currentPage,
            pageSize1,
            sort1,
            radius,
            accuracy,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: StoreFinderSearchPage
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var countStoreLocationsOperationSpec = {
        httpMethod: "HEAD",
        path: "rest/v2/{baseSiteId}/stores",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            query,
            latitude,
            longitude,
            radius,
            accuracy
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getStoreLocationOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/stores/{storeId}",
        urlParameters: [
            storeId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PointOfService
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getTitlesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/titles",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: TitleList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createUserOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users",
        urlParameters: [
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, UserSignUp, { required: true })
        },
        responses: {
            201: {
                bodyMapper: User
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getUserOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceUserOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}",
        urlParameters: [
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, User, { required: true })
        },
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeUserOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}",
        urlParameters: [
            baseSiteId,
            userId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var updateUserOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}",
        urlParameters: [
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, User, { required: true })
        },
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getAddressesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: AddressList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createAddressOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "address",
            mapper: __assign({}, Address, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Address
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var validateAddressOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses/verification",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "address",
            mapper: __assign({}, Address, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AddressValidation
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getAddressOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
        urlParameters: [
            addressId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Address
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceAddressOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
        urlParameters: [
            addressId,
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "address",
            mapper: __assign({}, Address, { required: true })
        },
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeAddressOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
        urlParameters: [
            addressId,
            baseSiteId,
            userId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var updateAddressOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}",
        urlParameters: [
            addressId,
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "address",
            mapper: __assign({}, Address, { required: true })
        },
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0,
            savedCartsOnly,
            currentPage,
            pageSize1,
            sort0
        ],
        responses: {
            200: {
                bodyMapper: CartList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createCartOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            oldCartId,
            toMergeCartGuid,
            fields0
        ],
        responses: {
            201: {
                bodyMapper: Cart
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Cart
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var createCartDeliveryAddressOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "address",
            mapper: __assign({}, Address, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Address
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceCartDeliveryAddressOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            addressId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartDeliveryAddressOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var doCartCloneOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart",
        urlParameters: [
            cartId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            name,
            description,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SaveCartResult
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getConsolidatedPickupLocationsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PointOfServiceList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createConsolidatedPickupLocationOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            storeName,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: CartModificationList
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartDeliveryModeOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: DeliveryMode
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceCartDeliveryModeOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            deliveryModeId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartDeliveryModeOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartDeliveryModesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: DeliveryModeList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceCartGuestUserOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/email",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            email
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartEntriesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: OrderEntryList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var createCartEntryOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
        urlParameters: [
            userId,
            cartId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "entry",
            mapper: __assign({}, OrderEntry, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CartModification
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartEntryOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
        urlParameters: [
            entryNumber,
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: OrderEntry
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceCartEntryOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
        urlParameters: [
            entryNumber,
            userId,
            cartId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "entry",
            mapper: __assign({}, OrderEntry, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CartModification
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartEntryOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
        urlParameters: [
            entryNumber,
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var updateCartEntryOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
        urlParameters: [
            entryNumber,
            userId,
            cartId,
            baseSiteId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "entry",
            mapper: __assign({}, OrderEntry, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CartModification
            },
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var doUpdateFlagForDeletionOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion",
        urlParameters: [
            cartId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SaveCartResult
            },
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getSopPaymentRequestDetailsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            responseUrl,
            extendedMerchantCallback,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PaymentRequest
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getSopPaymentResponseOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PaymentDetails
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doHandleSopPaymentResponseOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields2
        ],
        responses: {
            200: {
                bodyMapper: PaymentDetails
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeSopPaymentResponseOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var createCartPaymentDetailsOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        requestBody: {
            parameterPath: "paymentDetails",
            mapper: __assign({}, PaymentDetails, { required: true })
        },
        responses: {
            201: {
                bodyMapper: PaymentDetails
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceCartPaymentDetailsOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            paymentDetailsId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartPromotionsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PromotionResultList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doApplyCartPromotionOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            promotionId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartPromotionOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
        urlParameters: [
            promotionId,
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PromotionResultList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartPromotionOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
        urlParameters: [
            promotionId,
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var doUpdateSavedCartOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart",
        urlParameters: [
            cartId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SaveCartResult
            },
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var doSaveCartOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/save",
        urlParameters: [
            cartId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            saveCartName,
            saveCartDescription,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SaveCartResult
            },
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getSavedCartOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart",
        urlParameters: [
            cartId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: SaveCartResult
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getCartVouchersOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: VoucherList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var doApplyCartVoucherOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
        urlParameters: [
            baseSiteId,
            userId,
            cartId
        ],
        queryParameters: [
            voucherId
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeCartVoucherOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}",
        urlParameters: [
            voucherId,
            baseSiteId,
            userId,
            cartId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var doGiveConsentOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/consents",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            consentTemplateId,
            consentTemplateVersion
        ],
        responses: {
            200: {
                bodyMapper: ConsentTemplate
            },
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removeConsentOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/consents/{consentCode}",
        urlParameters: [
            consentCode,
            baseSiteId,
            userId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getConsentTemplatesOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: ConsentTemplateList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getConsentTemplateOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}",
        urlParameters: [
            consentTemplateId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: ConsentTemplate
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getUserCustomerGroupsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/customergroups",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: UserGroupList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceUserLoginOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/login",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            newLogin,
            password
        ],
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getUserOrderHistoryOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/orders",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            statuses,
            currentPage,
            pageSize1,
            sort0,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: OrderHistoryList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var countUserOrdersOperationSpec = {
        httpMethod: "HEAD",
        path: "rest/v2/{baseSiteId}/users/{userId}/orders",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            statuses
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var placeOrderOperationSpec = {
        httpMethod: "POST",
        path: "rest/v2/{baseSiteId}/users/{userId}/orders",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            cartId,
            securityCode,
            fields0
        ],
        responses: {
            201: {
                bodyMapper: Order
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getUserOrdersOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/orders/{code}",
        urlParameters: [
            code1,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: Order
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replaceUserPasswordOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/password",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            old,
            newParameter
        ],
        responses: {
            201: {},
            202: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getPaymentDetailsListOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails",
        urlParameters: [
            baseSiteId,
            userId
        ],
        queryParameters: [
            saved,
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PaymentDetailsList
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var getPaymentDetailsOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
        urlParameters: [
            paymentDetailsId,
            baseSiteId,
            userId
        ],
        queryParameters: [
            fields0
        ],
        responses: {
            200: {
                bodyMapper: PaymentDetails
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var replacePaymentDetailsOperationSpec = {
        httpMethod: "PUT",
        path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
        urlParameters: [
            paymentDetailsId,
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "paymentDetails",
            mapper: __assign({}, PaymentDetails, { required: true })
        },
        responses: {
            200: {},
            201: {},
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };
    var removePaymentDetailsOperationSpec = {
        httpMethod: "DELETE",
        path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
        urlParameters: [
            paymentDetailsId,
            baseSiteId,
            userId
        ],
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var updatePaymentDetailsOperationSpec = {
        httpMethod: "PATCH",
        path: "rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}",
        urlParameters: [
            paymentDetailsId,
            baseSiteId,
            userId
        ],
        requestBody: {
            parameterPath: "paymentDetails",
            mapper: __assign({}, PaymentDetails, { required: true })
        },
        responses: {
            200: {},
            204: {},
            401: {},
            403: {},
            default: {}
        },
        serializer: serializer
    };
    var getVoucherOperationSpec = {
        httpMethod: "GET",
        path: "rest/v2/{baseSiteId}/vouchers/{code}",
        urlParameters: [
            code1,
            baseSiteId
        ],
        queryParameters: [
            fields1
        ],
        responses: {
            200: {
                bodyMapper: Voucher
            },
            401: {},
            403: {},
            404: {},
            default: {}
        },
        serializer: serializer
    };

    exports.CommerceWebservicesV2 = CommerceWebservicesV2;
    exports.CommerceWebservicesV2Context = CommerceWebservicesV2Context;
    exports.CommerceWebservicesV2Models = index;
    exports.CommerceWebservicesV2Mappers = Mappers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=occ-client.js.map
